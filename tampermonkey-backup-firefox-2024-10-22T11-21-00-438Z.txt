{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Neopets - All Site Themes","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":["http://neopets.com/*","http://www.neopets.com/*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_run_in":[]},"user_modified":null,"run_in":null,"tags":[]},"storage":{"ts":1696775826894,"data":{}},"enabled":true,"position":1,"file_url":"http://userscripts-mirror.org/scripts/source/14357.user.js","uuid":"6419a4c6-d949-4880-80ba-052e1c0c8c9b","source":"Ly8gTmVvcGV0cyAtIEFsbCBTaXRlIFRoZW1lcw0KLy8gYnkgbnVuZ3J5c2Nwcm8gKG51bmdyeXNjcHJvQHlhaG9vLmNvbSkNCi8vDQovLyA9PVVzZXJTY3JpcHQ9PQ0KLy8gQG5hbWUgICAgICAgICAgTmVvcGV0cyAtIEFsbCBTaXRlIFRoZW1lcw0KLy8gQG5hbWVzcGFjZSAgICAgaHR0cHM6Ly91c2Vyc2NyaXB0cy1taXJyb3Iub3JnL3VzZXJzLzIyMzQ5DQovLyBAZGVzY3JpcHRpb24gICBWIDEuMDUgR2l2ZXMgeW91IHRoZSBhYmlsaXR5IHRvIGNoYW5nZSB0aGUgc2l0ZSB0aGVtZSB5b3UgdXNlIHRvIHZpZXcgTmVvcGV0cy5jb20NCi8vIEBpbmNsdWRlICAgICAgIGh0dHA6Ly9uZW9wZXRzLmNvbS8qDQovLyBAaW5jbHVkZSAgICAgICBodHRwOi8vd3d3Lm5lb3BldHMuY29tLyoNCi8vIEB2ZXJzaW9uICAgICAgIDEuMDUNCi8vIEB1cGRhdGVkICAgICAgIDIwMDkuMDQuMzANCi8vID09L1VzZXJTY3JpcHQ9PQ0KLy8NCi8vIFRoaXMgc2NyaXB0IGRvZXNuJ3QgdW5sb2NrIGFueSBvZiB0aGUgc2l0ZSB0aGVtZXMuICBJdCBvbmx5IGNoYW5nZXMgdGhlIHRoZW1lIHlvdSBzZWUuDQovLyBZb3UgY2FuIGNoYW5nZSB5b3VyIHRoZW1lIGJ5IGdvaW5nIHRvIHlvdXIgcHJlZmVyZW5jZXMgKGh0dHA6Ly93d3cubmVvcGV0cy5jb20vcHJlZmVyZW5jZXMucGh0bWwpIGFuZCBjaGFuZ2luZyBpdCB0aGVyZS4NCi8vIEFzIHNvb24gYXMgeW91IHBpY2sgYSB0aGVtZSwgaXQgd2lsbCBjaGFuZ2UgaW1tZWRpYXRlbHkgc28gZmVlbCBmcmVlIHRvIHN1cmYgTmVvcGV0cyB3aXRoIHlvdXIgbmV3IHRoZW1lLg0KLy8gVGhlcmUncyBubyBuZWVkIHRvIHByZXNzICdDaGFuZ2UgWW91ciBEZXRhaWxzJy4gIElmIHlvdSBwcmVzcyB0aGUgYnV0dG9uLCBlaXRoZXIgYnkgYWNjaWRlbnQgb3IgYmVjYXVzZSB5b3UncmUNCi8vIGNoYW5naW5nIG9uZSBvZiB0aGUgb3RoZXIgc2l0ZSBwcmVmZXJlbmNlcywgZG9uJ3Qgd29ycnkuICBOZW9wZXRzIHdpbGwgb25seSB0aGluayB0aGF0IHlvdSd2ZSBjaGFuZ2VkIHlvdXIgc2l0ZQ0KLy8gdGhlbWUgdG8gJ05lb3BldHMgQmFzaWMnLg0KLy8NCihmdW5jdGlvbigpew0KDQogIGZ1bmN0aW9uIGNoYW5nZXRoZW1lKCl7DQogICAgdmFyIG15dGhlbWUgPSBHTV9nZXRWYWx1ZSgnc2l0ZV90aGVtZScsICcwMDRfYmlyX2EyZTYwJyk7DQoNCiAgICBmb3IgKHZhciB4ID0gMCwgbGlua3NldDsgbGlua3NldCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdsaW5rJylbeF07IHgrKyl7DQogICAgICBpZiAobGlua3NldC5ocmVmLm1hdGNoKCd0aGVtZXMnKSl7DQogICAgICAgIHZhciBvbGR0aGVtZSA9IGxpbmtzZXQuaHJlZi5tYXRjaCgvXC90aGVtZXNcLyhcdyspXC5jc3MvKVsxXTsNCiAgICAgICAgbGlua3NldC5ocmVmID0gbGlua3NldC5ocmVmLnJlcGxhY2Uob2xkdGhlbWUsIG15dGhlbWUpOw0KICAgICAgICBmb3IgKHZhciB5ID0gMCwgaW1hZ2U7IGltYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RlbXBsYXRlX25hdicpLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbWcnKVt5XTsgeSsrKXsNCiAgICAgICAgICBpZiAoaW1hZ2Uuc3JjLm1hdGNoKG9sZHRoZW1lKSl7DQogICAgICAgICAgICBpbWFnZS5zcmMgPSBpbWFnZS5zcmMucmVwbGFjZShvbGR0aGVtZSwgbXl0aGVtZSk7DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGZvciAodmFyIHkgPSAwLCBpbWFnZTsgaW1hZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9vdGVyJykuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ltZycpW3ldOyB5Kyspew0KICAgICAgICAgIGlmIChpbWFnZS5zcmMubWF0Y2gob2xkdGhlbWUpKXsNCiAgICAgICAgICAgIGltYWdlLnNyYyA9IGltYWdlLnNyYy5yZXBsYWNlKG9sZHRoZW1lLCBteXRoZW1lKTsNCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgYnJlYWs7DQogICAgICB9DQogICAgfQ0KICB9DQogIA0KICBjaGFuZ2V0aGVtZSgpOw0KDQogIGlmIChkb2N1bWVudC5sb2NhdGlvbi5ocmVmLm1hdGNoKCduZW9wZXRzLmNvbS9wcmVmZXJlbmNlcy5waHRtbCcpKXsNCiAgICB2YXIgY2hhbmdldGhpcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCd1c2VyX3RoZW1lJylbMF07DQogICAgY2hhbmdldGhpcy5pbm5lckhUTUwgPSAnXA0KPG9wdGlvbiBpZD0iMDEwX2FjcF82ZmZjYiIgdmFsdWU9IjAiPkFsdGFkb3IgQ3VwPC9vcHRpb24+XA0KPG9wdGlvbiBpZD0iMDExX2FsY19jMWQxYyIgdmFsdWU9IjAiPkFsdGFkb3JpYW4gQ29uc3RlbGxhdGlvbnM8L29wdGlvbj5cDQo8b3B0aW9uIGlkPSIwMDhfY29tX2U1MjlhIiB2YWx1ZT0iMCI+Q3Vyc2Ugb2YgTWFyYXF1YTwvb3B0aW9uPlwNCjxvcHRpb24gaWQ9IjAxMl90Y2dfZDk3N2EiIHZhbHVlPSIwIj5DeW9kcmFrZXMgR2F6ZTwvb3B0aW9uPlwNCjxvcHRpb24gaWQ9IjAyM19keWRfYzQ3MGIiIHZhbHVlPSIwIj5EYWlseSBEYXJlPC9vcHRpb24+XA0KPG9wdGlvbiBpZD0iMDA0X2Jpcl9hMmU2MCIgdmFsdWU9IjAiPkhhcHB5IEJpcnRoZGF5PC9vcHRpb24+XA0KPG9wdGlvbiBpZD0iMDAzX2h3c185YmRlOSIgdmFsdWU9IjAiPkhhdW50ZWQgV29vZHM8L29wdGlvbj5cDQo8b3B0aW9uIGlkPSIwMDBfZGVmX2Y2NWIxIiB2YWx1ZT0iMCI+TmVvcGV0cyBCYXNpYzwvb3B0aW9uPlwNCjxvcHRpb24gaWQ9IjAxNl9ibHVfZTU2ZmMiIHZhbHVlPSIwIj5OZW9wZXRzIEJsdWU8L29wdGlvbj5cDQo8b3B0aW9uIGlkPSIwMTdfZ3JuX2YwYzFhIiB2YWx1ZT0iMCI+TmVvcGV0cyBHcmVlbjwvb3B0aW9uPlwNCjxvcHRpb24gaWQ9IjAxOF9wcnBsX2Y2NWIxIiB2YWx1ZT0iMCI+TmVvcGV0cyBQdXJwbGU8L29wdGlvbj5cDQo8b3B0aW9uIGlkPSIwMTVfcmVkXzA2MmJmIiB2YWx1ZT0iMCI+TmVvcGV0cyBSZWQ8L29wdGlvbj5cDQo8b3B0aW9uIGlkPSIwMTRfeWVsX2QxODdiIiB2YWx1ZT0iMCI+TmVvcGV0cyBZZWxsb3c8L29wdGlvbj5cDQo8b3B0aW9uIGlkPSIwMjBfcHBsXzNjMjJkIiB2YWx1ZT0iMCI+UGV0cGV0IFByb3RlY3Rpb24gTGVhZ3VlPC9vcHRpb24+XA0KPG9wdGlvbiBpZD0iMDIxX2NwYV81Y2UwMyIgdmFsdWU9IjAiPlB1enpsZSBBZHZlbnR1cmU8L29wdGlvbj5cDQo8b3B0aW9uIGlkPSIwMDlfcWFzXzkzNzA3IiB2YWx1ZT0iMCI+UWFzYWxhbjwvb3B0aW9uPlwNCjxvcHRpb24gaWQ9IjAyMl9scWNfZDJkMWEiIHZhbHVlPSIwIj5RdWl6YXJhXCdzIEN1cnNlPC9vcHRpb24+XA0KPG9wdGlvbiBpZD0iMDA3X3NmcF8yNzNhOCIgdmFsdWU9IjAiPlNwYWNlIEZhZXJpZSBQcmVtaXVtPC9vcHRpb24+XA0KPG9wdGlvbiBpZD0iMDEzX3Rvd180YjU0YiIgdmFsdWU9IjAiPlRhbGUgb2YgV29lPC9vcHRpb24+XA0KPG9wdGlvbiBpZD0iMDE5X3Nsb3RoMV83ZjkxNCIgdmFsdWU9IjAiPlRoZSBSZXR1cm4gb2YgRHIuIFNsb3RoPC9vcHRpb24+XA0KPG9wdGlvbiBpZD0iMDA2X3ZhbF9kODVhMCIgdmFsdWU9IjAiPlZhbGVudGluZXMgRGF5PC9vcHRpb24+XA0KPG9wdGlvbiBpZD0iMDA1X3dpbl81NzA2MSIgdmFsdWU9IjAiPldpbnRlciBIb2xpZGF5PC9vcHRpb24+JzsNCiAgICBjaGFuZ2V0aGlzLnBhcmVudE5vZGUucGFyZW50Tm9kZS5maXJzdENoaWxkLmZpcnN0Q2hpbGQubmV4dFNpYmxpbmcuaW5uZXJIVE1MID0gJ1RoZW1lIDxmb250IGNvbG9yPSJyZWQiPihBbGwgU2l0ZSBUaGVtZXMgLSBFbmFibGVkKTwvZm9udD4nOw0KICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKEdNX2dldFZhbHVlKCdzaXRlX3RoZW1lJywgJzAwNF9iaXJfYTJlNjAnKSkuc2VsZWN0ZWQgPSB0cnVlOw0KDQogICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoJ3VzZXJfdGhlbWUnKVswXS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLGZ1bmN0aW9uKCl7DQogICAgICBuZXd0aGVtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCd1c2VyX3RoZW1lJylbMF07DQogICAgICBHTV9zZXRWYWx1ZSgnc2l0ZV90aGVtZScsIG5ld3RoZW1lLm9wdGlvbnNbbmV3dGhlbWUuc2VsZWN0ZWRJbmRleF0uaWQpOw0KICAgICAgY2hhbmdldGhlbWUoKTsNCiAgICB9LCBmYWxzZSk7DQogIH0NCg0KfSkoKTs="},{"name":"Neopets : Dailies To-Do","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":["http://www.neopets.com/altador/council.phtml","http://www.neopets.com/altador/council.phtml?*","http://www.neopets.com/bank.phtml","http://www.neopets.com/desert/fruit/index.phtml","http://www.neopets.com/desert/shrine.phtml","http://www.neopets.com/faerieland/caverns/index.phtml","http://www.neopets.com/faerieland/tdmbgpop.phtml","http://www.neopets.com/faerieland/springs.phtml","http://www.neopets.com/island/tombola.phtml","http://www.neopets.com/jelly/jelly.phtml","http://www.neopets.com/medieval/pickyourown_index.phtml","http://www.neopets.com/medieval/pickyourown.phtml","http://www.neopets.com/moon/meteor.phtml","http://www.neopets.com/moon/meteor.phtml?getclose=1","http://www.neopets.com/petpetpark/daily.phtml","http://www.neopets.com/pirates/anchormanagement.phtml","http://www.neopets.com/pirates/buriedtreasure/index.phtml","http://www.neopets.com/pirates/forgottenshore.phtml","http://www.neopets.com/prehistoric/omelette.phtml","http://www.neopets.com/space/strangelever.phtml","http://www.neopets.com/water/fishing.phtml","http://www.neopets.com/winter/adventcalendar.phtml","http://www.neopets.com/worlds/deadlydice.phtml","http://www.neopets.com/worlds/geraptiku/tomb.phtml"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_run_in":[]},"user_modified":null,"run_in":null,"tags":[]},"storage":{"ts":1696775832253,"data":{}},"enabled":true,"position":2,"file_url":"http://userscripts-mirror.org/scripts/source/32041.user.js","uuid":"c9cbe6cd-8c72-418f-8d47-5850138359b5","source":"","resources":[],"requires":[{"meta":{"name":"63808.user.js","url":"https://userscripts-mirror.org/scripts/source/63808.user.js","ts":1696775833381,"mimetype":"text/javascript"},"source":"Ly8gPT1Vc2VyU2NyaXB0PT0NCi8vIEBuYW1lICAgICAgICAgICBJbmNsdWRlcyA6IFhQYXRoDQovLyBAbmFtZXNwYWNlICAgICAgaHR0cDovL2dtLndlc2xleS5ldGkuYnIvaW5jbHVkZXMNCi8vIEBkZXNjcmlwdGlvbiAgICB4cGF0aCBGdW5jdGlvbg0KLy8gQGF1dGhvciAgICAgICAgIHczNWwzeQ0KLy8gQGVtYWlsICAgICAgICAgIHczNWwzeUBicmFzbmV0Lm9yZw0KLy8gQGNvcHlyaWdodCAgICAgIDIwMDkrLCB3MzVsM3kgKGh0dHA6Ly9nbS53ZXNsZXkuZXRpLmJyKQ0KLy8gQGxpY2Vuc2UgICAgICAgIEdOVSBHUEwNCi8vIEBob21lcGFnZSAgICAgICBodHRwOi8vZ20ud2VzbGV5LmV0aS5icg0KLy8gQHZlcnNpb24gICAgICAgIDEuMC4wLjUNCi8vIEBsYW5ndWFnZSAgICAgICBlbg0KLy8gQGluY2x1ZGUgICAgICAgIG5vd2hlcmUNCi8vID09L1VzZXJTY3JpcHQ9PQ0KDQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KCUF1dGhvciAncyBOT1RFDQoNCiAgICBPcmlnaW5hbCBodHRwOi8vbG93cmVhbC5uZXQvYmxvZy8yMDA3LzExLzE3LzENCg0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCiAgICBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQ0KICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5DQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3INCiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLg0KDQogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsDQogICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YNCiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlDQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4NCg0KICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlDQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uDQoNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KDQpYUGF0aCA9IFhwYXRoID0geHBhdGggPSBmdW5jdGlvbigpDQp7DQoJdmFyIGEgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLAkvLyBhcmdzDQoJZSA9IGFbMF0sCS8vIGV4cHJlc3Npb24NCgljID0gYVsxXSwJLy8gY29udGV4dA0KCXQgPSBhWzJdOwkvLyB0eXBlDQoJDQoJaWYgKHR5cGVvZiBjID09ICJmdW5jdGlvbiIpDQoJew0KCQl0ID0gYzsNCgkJYyA9IG51bGw7DQoJfQ0KCWlmICghYykNCgljID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50fHxkb2N1bWVudDsNCgl2YXIgZCA9IGMub3duZXJEb2N1bWVudCB8fCBjOw0KCWUgPSBkLmNyZWF0ZUV4cHJlc3Npb24oZSwgZnVuY3Rpb24ocCkNCgl7DQogICAgICAgCXZhciBvID0gZC5jcmVhdGVOU1Jlc29sdmVyKGMpLmxvb2t1cE5hbWVzcGFjZVVSSShwKTsNCg0KCQlpZiAobykNCgkJcmV0dXJuIG87DQoJCWVsc2Ugc3dpdGNoIChjLmNvbnRlbnRUeXBlKQ0KCQl7DQoJCQljYXNlICJ0ZXh0L3hodG1sIjoNCgkJCWNhc2UgImFwcGxpY2F0aW9uL3hodG1sK3htbCI6DQoJCQkJcmV0dXJuICJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIjsNCgkJCWRlZmF1bHQ6DQoJCQkJcmV0dXJuICIiOw0KCQl9DQoJfSk7DQoNCglzd2l0Y2ggKHQpDQoJew0KCQljYXNlIFN0cmluZzoNCgkJCXJldHVybiBlLmV2YWx1YXRlKGMsIFhQYXRoUmVzdWx0LlNUUklOR19UWVBFLCBudWxsKS5zdHJpbmdWYWx1ZTsNCgkJY2FzZSBOdW1iZXI6DQoJCQlyZXR1cm4gZS5ldmFsdWF0ZShjLCBYUGF0aFJlc3VsdC5OVU1CRVJfVFlQRSwgbnVsbCkubnVtYmVyVmFsdWU7DQoJCWNhc2UgQm9vbGVhbjoNCgkJCXJldHVybiBlLmV2YWx1YXRlKGMsIFhQYXRoUmVzdWx0LkJPT0xFQU5fVFlQRSwgbnVsbCkuYm9vbGVhblZhbHVlOw0KCQljYXNlIEFycmF5Og0KCQkJdmFyIHIgPSBlLmV2YWx1YXRlKGMsIFhQYXRoUmVzdWx0Lk9SREVSRURfTk9ERV9TTkFQU0hPVF9UWVBFLCBudWxsKSwNCgkJCW8gPSBbXTsNCg0KCQkJZm9yICggdmFyIGFpID0gMCAsIGF0ID0gci5zbmFwc2hvdExlbmd0aCA7IGFpIDwgYXQgOyArK2FpICkNCgkJCQlvLnB1c2goci5zbmFwc2hvdEl0ZW0oYWkpKTsNCg0KCQkJcmV0dXJuIG87DQoJCWNhc2UgdW5kZWZpbmVkOg0KCQkJdmFyIHIgPSBlLmV2YWx1YXRlKGMsIFhQYXRoUmVzdWx0LkFOWV9UWVBFLCBudWxsKTsNCgkJCXN3aXRjaCAoci5yZXN1bHRUeXBlKQ0KCQkJew0KCQkJCWNhc2UgWFBhdGhSZXN1bHQuU1RSSU5HX1RZUEU6DQoJCQkJCXJldHVybiByLnN0cmluZ1ZhbHVlOw0KCQkJCWNhc2UgWFBhdGhSZXN1bHQuTlVNQkVSX1RZUEU6DQoJCQkJCXJldHVybiByLm51bWJlclZhbHVlOw0KCQkJCWNhc2UgWFBhdGhSZXN1bHQuQk9PTEVBTl9UWVBFOg0KCQkJCQlyZXR1cm4gci5ib29sZWFuVmFsdWU7DQoJCQkJY2FzZSBYUGF0aFJlc3VsdC5VTk9SREVSRURfTk9ERV9JVEVSQVRPUl9UWVBFOg0KCQkJCQl2YXIgbyA9IFtdLCBpOw0KCQkJCQl3aGlsZSAoaSA9IHIuaXRlcmF0ZU5leHQoKSkNCgkJCQkJCW8ucHVzaChpKTsNCg0KCQkJCQlyZXR1cm4gbzsNCgkJCX0NCgkJCXJldHVybiBudWxsOw0KCQlkZWZhdWx0Og0KCQkJdGhyb3coVHlwZUVycm9yKCJ4cGF0aDogc3BlY2lmaWVkIHR5cGUgaXMgbm90IHZhbGlkIHR5cGUuIikpOw0KCX0NCn07"},{"meta":{"name":"56489.user.js","url":"https://userscripts-mirror.org/scripts/source/56489.user.js","ts":1696775833362,"mimetype":"text/javascript"},"source":"Ly8gPT1Vc2VyU2NyaXB0PT0NCi8vIEBuYW1lICAgICAgICAgICBJbmNsdWRlcyA6IEh0dHBSZXF1ZXN0DQovLyBAbmFtZXNwYWNlICAgICAgaHR0cDovL2dtLndlc2xleS5ldGkuYnIvaW5jbHVkZXMNCi8vIEBkZXNjcmlwdGlvbiAgICBIdHRwUmVxdWVzdCBGdW5jdGlvbg0KLy8gQGF1dGhvciAgICAgICAgIHczNWwzeQ0KLy8gQGVtYWlsICAgICAgICAgIHczNWwzeUBicmFzbmV0Lm9yZw0KLy8gQGNvcHlyaWdodCAgICAgIDIwMTErLCB3MzVsM3kgKGh0dHA6Ly9nbS53ZXNsZXkuZXRpLmJyKQ0KLy8gQGxpY2Vuc2UgICAgICAgIEdOVSBHUEwNCi8vIEBob21lcGFnZSAgICAgICBodHRwOi8vZ20ud2VzbGV5LmV0aS5ici9pbmNsdWRlcw0KLy8gQHZlcnNpb24gICAgICAgIDIuMC41LjENCi8vIEBsYW5ndWFnZSAgICAgICBlbg0KLy8gQGluY2x1ZGUgICAgICAgIG5vd2hlcmUNCi8vIEBleGNsdWRlICAgICAgICAqDQovLyBAY29udHJpYnV0b3IgICAgc2l6emxlbWN0d2l6emxlIChodHRwczovL3VzZXJzY3JpcHRzLW1pcnJvci5vcmcvZ3VpZGVzLzkpDQovLyBAY29udHJpYnV0b3IgICAgU2VuaWx0YWkgKGh0dHBzOi8vdXNlcnNjcmlwdHMtbWlycm9yLm9yZy90b3BpY3MvNDc2ODc/cGFnZT0yI3Bvc3RzLTI1NzY3NykNCi8vIEBjb250cmlidXRvciAgICBhbWVib2lkZSAoaHR0cHM6Ly91c2Vyc2NyaXB0cy1taXJyb3Iub3JnL3RvcGljcy84ODAyMSNwb3N0cy0zODQxNTUpDQovLyA9PS9Vc2VyU2NyaXB0PT0NCg0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCiAgICBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQ0KICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5DQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3INCiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLg0KDQogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsDQogICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YNCiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlDQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4NCg0KICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlDQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uDQoNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KDQpIdHRwUmVxdWVzdCA9IGZ1bmN0aW9uICgpIHt9Ow0KSHR0cFJlcXVlc3Qub3BlbiA9IGZ1bmN0aW9uIChwYXJhbXMpIHsNCglyZXR1cm4gbmV3IChmdW5jdGlvbiAocGFyYW1zKSB7DQoJCWlmICghL15odHRwcz86XC9cLy8udGVzdChwYXJhbXMudXJsKSkgew0KCQkJcGFyYW1zLnVybCA9ICJodHRwOi8vIiArIHBhcmFtcy51cmw7DQoJCX0NCg0KCQl0aGlzLm9wdGlvbnMgPSB7DQoJCQkibWV0aG9kIgkJOiBwYXJhbXMubWV0aG9kLnRvVXBwZXJDYXNlKCkgfHwgIkdFVCIsDQoJCQkidXJsIgkJCTogcGFyYW1zLnVybCwNCgkJCSJoZWFkZXJzIgkJOiB7ICJVc2VyLUFnZW50IiA6IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50IH0sDQoJCQkic3luY2hyb25vdXMiCTogISFwYXJhbXMuc3luY2hyb25vdXMsDQoJCQkib25sb2FkIgkJOiBmdW5jdGlvbiAoZSkgew0KCQkJCXZhciBvYmogPSBwYXJhbXMucGFyYW1ldGVycyB8fCB7fTsNCg0KCQkJCW9iai5yZXNwb25zZSA9IHsNCgkJCQkJInJhdyIJOiBlLA0KCQkJCQkidGV4dCIJOiBlLnJlc3BvbnNlVGV4dCwNCgkJCQkJInhtbCIJOiBlLnJlc3BvbnNlWE1MDQoJCQkJfTsNCg0KCQkJCWlmICgvXkNvbnRlbnQtVHlwZTogKD86dGV4dHxhcHBsaWNhdGlvbilcLyg/OngtKT9qc29uL20udGVzdChlLnJlc3BvbnNlSGVhZGVycykpIHsNCgkJCQkJdHJ5IHsNCgkJCQkJCW9iai5yZXNwb25zZS5qc29uID0gKHR5cGVvZiBKU09OICE9ICJ1bmRlZmluZWQiICYmIHR5cGVvZiBKU09OLnBhcnNlID09ICJmdW5jdGlvbiIgPyBKU09OLnBhcnNlKGUucmVzcG9uc2VUZXh0KSA6IGV2YWwoIigiICsgZS5yZXNwb25zZVRleHQgKyAiKSIpICk7DQoJCQkJCX0gY2F0Y2ggKGUpIHsNCgkJCQkJCW9iai5yZXNwb25zZS5qc29uID0ge307DQoJCQkJCX0NCgkJCQl9DQoNCgkJCQlpZiAoIW9iai5yZXNwb25zZS54bWwpIHsNCgkJCQkJaWYgKC9eQ29udGVudC1UeXBlOiB0ZXh0XC94bWwvbS50ZXN0KGUucmVzcG9uc2VIZWFkZXJzKSkgew0KCQkJCQkJb2JqLnJlc3BvbnNlLnhtbCA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoZS5yZXNwb25zZVRleHQsICJ0ZXh0L3htbCIpOw0KCQkJCQl9IGVsc2UgaWYgKC9eQ29udGVudC1UeXBlOiB0ZXh0XC9odG1sL20udGVzdChlLnJlc3BvbnNlSGVhZGVycykpIHsNCgkJCQkJCS8qdmFyIGR0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlRG9jdW1lbnRUeXBlKCJodG1sIiwgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiwgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCIpOw0KCQkJCQkJdmFyIGRvYyA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZURvY3VtZW50KG51bGwsIG51bGwsIGR0KTsNCg0KCQkJCQkJLy8gSSBoYXZlIHRvIGZpbmQgYSB3b3JrYXJvdW5kIGJlY2F1c2UgdGhpcyB0ZWNobmlxdWUgbWFrZSB0aGUgaHRtbCgqKS9oZWFkL2JvZHkgdGFncyBkaXNhcHBlYXIuICANCgkJCQkJCXZhciBodG1sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaHRtbCIpOw0KCQkJCQkJaHRtbC5pbm5lckhUTUwgPSBlLnJlc3BvbnNlVGV4dDsNCgkJCQkJCWRvYy5hcHBlbmRDaGlsZChodG1sKTsqLw0KCQkJCQkJdmFyIGRvYyA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgiIik7DQoJCQkJCQlkb2MuZG9jdW1lbnRFbGVtZW50LmlubmVySFRNTCA9IGUucmVzcG9uc2VUZXh0Ow0KDQoJCQkJCQlvYmoucmVzcG9uc2UueG1sID0gZG9jOw0KCQkJCQl9DQoJCQkJfQ0KDQoJCQkJaWYgKHR5cGVvZiBwYXJhbXMub25zdWNjZXNzID09ICJmdW5jdGlvbiIpIHsNCgkJCQkJcGFyYW1zLm9uc3VjY2VzcyhvYmopOw0KCQkJCX0NCgkJCX0NCgkJfTsNCgkJDQoJCWlmICgiaGVhZGVycyIgaW4gcGFyYW1zKSB7DQoJCQlmb3IgKHZhciBoZWFkZXIgaW4gcGFyYW1zLmhlYWRlcnMpIHsNCgkJCQl0aGlzLm9wdGlvbnMuaGVhZGVyc1toZWFkZXJdID0gcGFyYW1zLmhlYWRlcnNbaGVhZGVyXTsNCgkJCX0NCgkJfQ0KDQoJCXRoaXMuc2VuZCA9IGZ1bmN0aW9uIChjb250ZW50KSB7DQoJCQlpZiAoY29udGVudCkgew0KCQkJCWlmIChjb250ZW50IGluc3RhbmNlb2YgdW5zYWZlV2luZG93LkhUTUxDb2xsZWN0aW9uIHx8IGNvbnRlbnQgaW5zdGFuY2VvZiBIVE1MQ29sbGVjdGlvbikgew0KCQkJCQljb250ZW50ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGNvbnRlbnQpOw0KCQkJCX0NCgkJCQkNCgkJCQl2YXIgZGF0YSA9IHt9Ow0KCQkJCWlmIChjb250ZW50IGluc3RhbmNlb2YgQXJyYXkpIHsNCgkJCQkJZm9yIGVhY2ggKHZhciBlIGluIGNvbnRlbnQpIHsNCgkJCQkJCWlmICghL14oPzpyYWRpb3xjaGVja2JveCkkL2kudGVzdChlLnR5cGUpIHx8IGUuY2hlY2tlZCkgew0KCQkJCQkJCWlmIChlLmNoZWNrZWQgJiYgL15jaGVja2JveCQvaS50ZXN0KGUudHlwZSkpIHsNCgkJCQkJCQkJaWYgKGUubmFtZSBpbiBkYXRhKSB7DQoJCQkJCQkJCQlkYXRhW2UubmFtZV0ucHVzaChlLnZhbHVlKTsNCgkJCQkJCQkJfSBlbHNlIHsNCgkJCQkJCQkJCWRhdGFbZS5uYW1lXSA9IFtlLnZhbHVlXTsNCgkJCQkJCQkJfQ0KCQkJCQkJCX0gZWxzZSB7DQoJCQkJCQkJCWRhdGFbZS5uYW1lXSA9IGUudmFsdWU7DQoJCQkJCQkJfQ0KCQkJCQkJfQ0KCQkJCQl9DQoNCgkJCQkJY29udGVudCA9IGRhdGE7DQoJCQkJfQ0KDQoJCQkJaWYgKHR5cGVvZiBjb250ZW50ID09ICJvYmplY3QiKSB7DQoJCQkJCXZhciB4ID0gIiI7DQoJCQkJCWZvciAodmFyIGtleSBpbiBjb250ZW50KSB7DQoJCQkJCQlpZiAoY29udGVudFtrZXldIGluc3RhbmNlb2YgQXJyYXkpIHsNCgkJCQkJCQl2YXIga2V5YXJyID0ga2V5LnJlcGxhY2UoL15ccyt8XHMrJC9nLCAiIik7DQoJCQkJCQkJaWYgKCEvXFtcdypcXSQvLnRlc3Qoa2V5KSkNCgkJCQkJCQlrZXlhcnIgKz0gIltdIjsNCg0KCQkJCQkJCWZvciBlYWNoICh2YXIgdiBpbiBjb250ZW50W2tleV0pIHsNCgkJCQkJCQkJeCArPSAiJiIgKyBlbmNvZGVVUklDb21wb25lbnQoa2V5YXJyKSArICI9IiArIGVuY29kZVVSSUNvbXBvbmVudCh2KTsNCgkJCQkJCQl9DQoJCQkJCQl9IGVsc2Ugew0KCQkJCQkJCXggKz0gIiYiICsgZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAiPSIgKyBlbmNvZGVVUklDb21wb25lbnQoY29udGVudFtrZXldKTsNCgkJCQkJCX0NCgkJCQkJfQ0KDQoJCQkJCWNvbnRlbnQgPSB4LnN1YnN0cigxKTsNCg0KCQkJCQlpZiAoIlBPU1QiID09IHRoaXMub3B0aW9ucy5tZXRob2QpIHsNCgkJCQkJCXRoaXMub3B0aW9ucy5oZWFkZXJzWyJDb250ZW50LVR5cGUiXSA9ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiOw0KCQkJCQkJdGhpcy5vcHRpb25zLmRhdGEgPSBjb250ZW50Ow0KCQkJCQl9IGVsc2Ugew0KCQkJCQkJdGhpcy5vcHRpb25zLnVybCArPSAoL1w/Ly50ZXN0KHRoaXMub3B0aW9ucy51cmwpID8gIiYiIDogIj8iKSArIGNvbnRlbnQ7DQoJCQkJCX0NCgkJCQl9IGVsc2Ugew0KCQkJCQl0aGlzLm9wdGlvbnMuZGF0YSA9IGNvbnRlbnQ7DQoJCQkJfQ0KCQkJfQ0KDQoJCQl0aGlzLnJlc3VsdCA9IEdNX3htbGh0dHBSZXF1ZXN0KHRoaXMub3B0aW9ucyk7DQoNCgkJCXJldHVybiB0aGlzOw0KCQl9DQoJfSkocGFyYW1zKTsNCn07"},{"meta":{"name":"85618.user.js","url":"https://userscripts-mirror.org/scripts/source/85618.user.js","ts":1696775833794,"mimetype":"text/javascript"},"source":"Ly8gPT1Vc2VyU2NyaXB0PT0NCi8vIEBuYW1lICAgICAgICAgICBJbmNsdWRlcyA6IFRyYW5zbGF0ZQ0KLy8gQG5hbWVzcGFjZSAgICAgIGh0dHA6Ly9nbS53ZXNsZXkuZXRpLmJyL2luY2x1ZGVzDQovLyBAZGVzY3JpcHRpb24gICAgVHJhbnNsYXRlIEZ1bmN0aW9uDQovLyBAYXV0aG9yICAgICAgICAgdzM1bDN5DQovLyBAZW1haWwgICAgICAgICAgdzM1bDN5QGJyYXNuZXQub3JnDQovLyBAY29weXJpZ2h0ICAgICAgMjAxMyssIHczNWwzeSAoaHR0cDovL2dtLndlc2xleS5ldGkuYnIpDQovLyBAbGljZW5zZSAgICAgICAgR05VIEdQTA0KLy8gQGhvbWVwYWdlICAgICAgIGh0dHA6Ly9nbS53ZXNsZXkuZXRpLmJyDQovLyBAdmVyc2lvbiAgICAgICAgMy4xLjENCi8vIEBsYW5ndWFnZSAgICAgICBlbg0KLy8gQGluY2x1ZGUgICAgICAgIG5vd2hlcmUNCi8vIEBncmFudCAgICAgICAgICBHTV94bWxodHRwUmVxdWVzdA0KLy8gQHJlcXVpcmUgICAgICAgIGh0dHBzOi8vdXNlcnNjcmlwdHMtbWlycm9yLm9yZy9zY3JpcHRzL3NvdXJjZS81NjQ4OS51c2VyLmpzDQovLyA9PS9Vc2VyU2NyaXB0PT0NCg0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCiAgICBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQ0KICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5DQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3INCiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLg0KDQogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsDQogICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YNCiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlDQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4NCg0KICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlDQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uDQoNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KDQp2YXIgVHJhbnNsYXRlID0gew0KCXZlcnNpb24JCTogMSwNCglrZXkJCQk6ICIiLA0KCWV4ZWN1dGUJCTogZnVuY3Rpb24gKHRleHQsIGZyb20sIHRvLCBjYikgew0KCQl2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpOw0KDQoJCWlmICghVHJhbnNsYXRlLmtleSkgew0KCQkJLy8gR29vZ2xlIFRyYW5zbGF0ZSBBUEkgKGRlcHJlY2F0ZWQpDQoJCQl2YXIgdiA9IGZ1bmN0aW9uIChmcm9tLCB0ZXh0Mikgew0KCQkJCXN3aXRjaCAoVHJhbnNsYXRlLnZlcnNpb24pIHsNCgkJCQkJY2FzZSAyOgkvLyB2Mg0KCQkJCQkJdmFyIHRleHRfYXJyID0gW107DQoJCQkJCQlpZiAodGV4dDIgaW5zdGFuY2VvZiBBcnJheSkgew0KCQkJCQkJCWZvciAodmFyIGluZGV4IGluIHRleHQyKSB7DQoJCQkJCQkJCXRleHRfYXJyLnB1c2goew0KCQkJCQkJCQkJInRyYW5zbGF0ZWRUZXh0IiA6IChmcm9tID09IHRvID8gdGV4dFtpbmRleF0gOiB0ZXh0MltpbmRleF0pDQoJCQkJCQkJCX0pOw0KCQkJCQkJCX0NCgkJCQkJCX0gZWxzZSB7DQoJCQkJCQkJdGV4dF9hcnIucHVzaCh7DQoJCQkJCQkJCSJ0cmFuc2xhdGVkVGV4dCIgOiAoZnJvbSA9PSB0byA/IHRleHQgOiB0ZXh0MikNCgkJCQkJCQl9KTsNCgkJCQkJCX0NCg0KCQkJCQkJcmV0dXJuIHsNCgkJCQkJCQkiZGF0YSIgOiB7ICJ0cmFuc2xhdGlvbnMiIDogdGV4dF9hcnIgfQ0KCQkJCQkJfTsNCgkJCQkJY2FzZSAxOgkvLyB2MQ0KCQkJCQkJcmV0dXJuIHsNCgkJCQkJCQkidHJhbnNsYXRpb24iIDogKGZyb20gPT0gdG8gPyB0ZXh0IDogdGV4dDIpLA0KCQkJCQkJfTsNCgkJCQkJZGVmYXVsdDoNCgkJCQkJCWJyZWFrOw0KCQkJCX0NCgkJCX07DQoNCgkJCWlmIChmcm9tID09IHRvKSB7DQoJCQkJY2Iodihmcm9tLCB0ZXh0KSwgYXJncyk7DQoJCQl9IGVsc2Ugew0KCQkJCUh0dHBSZXF1ZXN0Lm9wZW4oew0KCQkJCQkibWV0aG9kIiA6ICJHRVQiLA0KCQkJCQkidXJsIiA6ICJodHRwOi8vdHJhbnNsYXRlLmdvb2dsZS5jb20uYnIvdHJhbnNsYXRlX2EvdCIsDQoJCQkJCSJvbnN1Y2Nlc3MiIDogZnVuY3Rpb24gKHhocikgew0KCQkJCQkJdmFyIHIgPSBbW1siIl1dLCxmcm9tXTsNCg0KCQkJCQkJdHJ5IHsNCgkJCQkJCQlyID0geGhyLnJlc3BvbnNlLmpzb24gfHwgSlNPTi5wYXJzZSh4aHIucmVzcG9uc2UudGV4dC5yZXBsYWNlKC8sKD89LCkvZywgJyxudWxsJykpOw0KCQkJCQkJfSBjYXRjaCAoZSkgew0KCQkJCQkJCXIgPSBldmFsKHhoci5yZXNwb25zZS50ZXh0KTsNCgkJCQkJCX0NCg0KCQkJCQkJY2IodihyWzJdLCByWzBdWzBdWzBdKSwgYXJncyk7DQoJCQkJCX0NCgkJCQl9KS5zZW5kKHsNCgkJCQkJImNsaWVudCIJOiAidCIsDQoJCQkJCSJzbCIJCTogZnJvbSwNCgkJCQkJInRsIgkJOiB0bywNCgkJCQkJImllIgkJOiAiVVRGLTgiLA0KCQkJCQkib2UiCQk6ICJVVEYtOCIsDQoJCQkJCSJxIgkJCTogdGV4dCwNCgkJCQl9KTsNCgkJCX0NCgkJfSBlbHNlIGlmICghZnJvbSkgew0KCQkJVHJhbnNsYXRlLnRvKHRleHQsIHRvLCBjYik7DQoJCX0gZWxzZSB7DQoJCQlIdHRwUmVxdWVzdC5vcGVuKHsNCgkJCQkibWV0aG9kIiA6ICJQT1NUIiwNCgkJCQkidXJsIiA6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9sYW5ndWFnZS90cmFuc2xhdGUvdjIiLA0KCQkJCSJoZWFkZXJzIiA6IHsNCgkJCQkJIlgtSFRUUC1NZXRob2QtT3ZlcnJpZGUiIDogIkdFVCINCgkJCQl9LA0KCQkJCSJvbnN1Y2Nlc3MiIDogZnVuY3Rpb24gKHhocikgew0KCQkJCQljYih4aHIucmVzcG9uc2UuanNvbiwgYXJncyk7DQoJCQkJfQ0KCQkJfSkuc2VuZCh7DQoJCQkJImtleSIgOiBUcmFuc2xhdGUua2V5LA0KCQkJCSJzb3VyY2UiIDogZnJvbSwNCgkJCQkidGFyZ2V0IiA6IHRvLA0KCQkJCSJxIiA6IHRleHQNCgkJCX0pOw0KCQl9DQoJfSwNCgl0bwkJCTogZnVuY3Rpb24odGV4dCwgdG8sIGNiKSB7DQoJCWlmICghVHJhbnNsYXRlLmtleSkgew0KCQkJLy8gR29vZ2xlIFRyYW5zbGF0ZSBBUEkgKGRlcHJlY2F0ZWQpDQoJCQlUcmFuc2xhdGUuZXhlY3V0ZSh0ZXh0LCAiLSIsIHRvLCBjYik7DQoJCX0gZWxzZSB7DQoJCQlIdHRwUmVxdWVzdC5vcGVuKHsNCgkJCQkibWV0aG9kIiA6ICJQT1NUIiwNCgkJCQkidXJsIiA6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9sYW5ndWFnZS90cmFuc2xhdGUvdjIvZGV0ZWN0IiwNCgkJCQkiaGVhZGVycyIgOiB7DQoJCQkJCSJYLUhUVFAtTWV0aG9kLU92ZXJyaWRlIiA6ICJHRVQiDQoJCQkJfSwNCgkJCQkib25zdWNjZXNzIiA6IGZ1bmN0aW9uICh4aHIpIHsNCgkJCQkJaWYgKC9eMi8udGVzdCh4aHIucmVzcG9uc2UucmF3LnN0YXR1cykpIHsNCgkJCQkJCWRhdGEuZGV0ZWN0aW9ucy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7DQoJCQkJCQkJcmV0dXJuIGEuY29uZmlkZW5jZSAtIGIuY29uZmlkZW5jZTsNCgkJCQkJCX0pOw0KDQoJCQkJCQlUcmFuc2xhdGUuZXhlY3V0ZSh0ZXh0LCBkYXRhLmRldGVjdGlvbnNbMF0ubGFuZ3VhZ2UsIHRvLCBjYik7DQoJCQkJCX0NCgkJCQl9DQoJCQl9KS5zZW5kKHsNCgkJCQkia2V5IiA6IFRyYW5zbGF0ZS5rZXksDQoJCQkJInEiIDogdGV4dA0KCQkJfSk7DQoJCX0NCgl9LA0KfTs="},{"meta":{"name":"87940.user.js","url":"https://userscripts-mirror.org/scripts/source/87940.user.js","ts":1696775833360,"mimetype":"text/javascript"},"source":"Ly8gPT1Vc2VyU2NyaXB0PT0NCi8vIEBuYW1lICAgICAgICAgICBJbmNsdWRlcyA6IEkxOG4NCi8vIEBuYW1lc3BhY2UgICAgICBodHRwOi8vZ20ud2VzbGV5LmV0aS5ici9pbmNsdWRlcw0KLy8gQGRlc2NyaXB0aW9uICAgIEkxOG4gRnVuY3Rpb24NCi8vIEBhdXRob3IgICAgICAgICB3MzVsM3kNCi8vIEBlbWFpbCAgICAgICAgICB3MzVsM3lAYnJhc25ldC5vcmcNCi8vIEBjb3B5cmlnaHQgICAgICAyMDExKywgdzM1bDN5IChodHRwOi8vZ20ud2VzbGV5LmV0aS5icikNCi8vIEBsaWNlbnNlICAgICAgICBHTlUgR1BMDQovLyBAaG9tZXBhZ2UgICAgICAgaHR0cDovL2dtLndlc2xleS5ldGkuYnINCi8vIEB2ZXJzaW9uICAgICAgICAzLjIuMQ0KLy8gQGxhbmd1YWdlICAgICAgIGVuDQovLyBAaW5jbHVkZSAgICAgICAgbm93aGVyZQ0KLy8gQGV4Y2x1ZGUgICAgICAgICoNCi8vIEBpY29uICAgICAgICAgICBodHRwOi8vZ20ud2VzbGV5LmV0aS5ici9pY29uLnBocD9kZXNjPTg3OTQwDQovLyBAZ3JhbnQgICAgICAgICAgR01fZ2V0VmFsdWUNCi8vIEBncmFudCAgICAgICAgICBHTV9zZXRWYWx1ZQ0KLy8gQGdyYW50ICAgICAgICAgIEdNX2RlbGV0ZVZhbHVlDQovLyBAZ3JhbnQgICAgICAgICAgR01feG1saHR0cFJlcXVlc3QNCi8vIEBncmFudCAgICAgICAgICBHTV9nZXRSZXNvdXJjZVRleHQNCi8vIEByZXNvdXJjZSAgICAgICBpMThuIGh0dHA6Ly9wYXN0ZWJpbi5jb20vZG93bmxvYWQucGhwP2k9VUxyVlRzU2cNCi8vIEByZXNvdXJjZSAgICAgICBtZXRhIGh0dHBzOi8vdXNlcnNjcmlwdHMtbWlycm9yLm9yZy9zY3JpcHRzL3NvdXJjZS84Nzk0MC5tZXRhLmpzDQovLyBAcmVxdWlyZSAgICAgICAgaHR0cHM6Ly91c2Vyc2NyaXB0cy1taXJyb3Iub3JnL3NjcmlwdHMvc291cmNlLzU2NDg5LnVzZXIuanMNCi8vIEByZXF1aXJlICAgICAgICBodHRwczovL3VzZXJzY3JpcHRzLW1pcnJvci5vcmcvc2NyaXB0cy9zb3VyY2UvODU2MTgudXNlci5qcw0KLy8gPT0vVXNlclNjcmlwdD09DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQogICAgVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkNCiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQ0KICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yDQogICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4NCg0KICAgIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLA0KICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mDQogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQ0KICAgIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuDQoNCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQ0KICAgIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+Lg0KDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCg0KdmFyIEkxOG4gPSB7DQoJZ2V0IGxvY2FsZSgpIHsNCgkJcmV0dXJuIEdNX2dldFZhbHVlKCJsb2NhbGUiLCBuYXZpZ2F0b3IubGFuZ3VhZ2UpIHx8ICIiOw0KCX0sDQoJc2V0IGxvY2FsZSh2YWx1ZSkgew0KCQlHTV9zZXRWYWx1ZSgibG9jYWxlIiwgdmFsdWUpOw0KCX0sDQoJZ2V0CTogZnVuY3Rpb24gKGl0ZW1fc3RyLCBpdGVtLCBvYmosIGNhbGxiYWNrKSB7DQoJCXZhciBzZWN0aW9uID0gSTE4bi5sb2NhbGUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bXy1dKy9nLCAiLSIpLnNwbGl0KCIsIikubWFwKGZ1bmN0aW9uICgkMCkgew0KCQkJcmV0dXJuICh+JDAuaW5kZXhPZigiLSIpID8gJDAuc3Vic3RyaW5nKDAsICQwLmluZGV4T2YoIi0iKSkgOiAkMCk7DQoJCX0pLA0KCQlpMThuID0gSlNPTi5wYXJzZShHTV9nZXRWYWx1ZSgiaTE4biIpIHx8ICd7InZlcnNpb24iIDogLTEsICJsYW5ndWFnZXMiIDoge319JyksDQoJCXJlcyA9IHsNCgkJCSJ2ZXJzaW9uIgk6IDAsDQoJCQkibGFuZ3VhZ2VzIgk6IHt9LA0KCQl9Ow0KCQkNCgkJaWYgKCEoImxhbmd1YWdlcyIgaW4gaTE4bikpIHsNCgkJCUdNX2RlbGV0ZVZhbHVlKCJpMThuIik7DQoJCQlpMThuID0gew0KCQkJCSJ2ZXJzaW9uIiA6IC0xLA0KCQkJCSJsYW5ndWFnZXMiIDoge30NCgkJCX07DQoJCX0NCg0KCQlpZiAodHlwZW9mIGl0ZW0gPT0gImZ1bmN0aW9uIikgew0KCQkJY2FsbGJhY2sgPSBpdGVtOw0KCQkJaXRlbSA9IG51bGw7DQoJCQlvYmogPSBudWxsOw0KCQl9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT0gImZ1bmN0aW9uIikgew0KCQkJY2FsbGJhY2sgPSBvYmo7DQoJCQlvYmogPSBudWxsOw0KCQl9DQoNCgkJaWYgKGl0ZW0gaW5zdGFuY2VvZiBBcnJheSkgew0KCQkJb2JqID0gaXRlbTsNCgkJCWl0ZW0gPSBudWxsOw0KCQl9DQoNCgkJdmFyIGNiMiA9IGZ1bmN0aW9uIChzdHIpIHsNCgkJCXJldHVybiAob2JqID8gc3RyLnJlcGxhY2UoL1x7KFxkKylcfS9nLCBmdW5jdGlvbiAoJDAsICQxKSB7DQoJCQkJcmV0dXJuICgkMSBpbiBvYmogPyBvYmpbJDFdIDogJDApOw0KCQkJfSkgOiBzdHIpOw0KCQl9LA0KCQljYiA9IGZ1bmN0aW9uIChzdHIpIHsNCgkJCWlmIChjYWxsYmFjaykgew0KCQkJCWNhbGxiYWNrKHN0ciwgb2JqKTsNCgkJCX0NCg0KCQkJcmV0dXJuIGNiMihzdHIpOw0KCQl9Ow0KDQoJCWlmICghaXRlbSkgew0KCQkJaXRlbSA9IGl0ZW1fc3RyLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW15cdTAxMDAtXHVmZmZmXHc/LC4tXSsvZywgIiIpOw0KDQoJCQlpZiAoaXRlbV9zdHIubGVuZ3RoICYmICFpdGVtKSB7DQoJCQkJaXRlbSA9IGl0ZW1fc3RyOw0KCQkJfQ0KCQl9DQoNCgkJLy8gRm9yIGNvbXBhdGliaWxpdHkgd2l0aCB2Mi4wLjEuMA0KCQl0cnkgew0KCQkJcmVzID0gSlNPTi5wYXJzZShHTV9nZXRSZXNvdXJjZVRleHQoImkxOG4iKS5yZXBsYWNlKC9eXCh8XCkkL2csICIiKSB8fCAie30iKTsNCgkJCQ0KCQkJaWYgKCEoImxhbmd1YWdlcyIgaW4gcmVzKSkgew0KCQkJCXJlcy52ZXJzaW9uID0gMDsNCgkJCQlyZXMubGFuZ3VhZ2VzID0gcmVzOw0KCQkJfQ0KCQl9IGNhdGNoIChlKSB7IH0NCg0KCQlpZiAoaTE4bi52ZXJzaW9uIDwgcmVzLnZlcnNpb24pIHsNCgkJCWkxOG4udmVyc2lvbiA9IHJlcy52ZXJzaW9uOw0KCQkJaTE4bi5sYW5ndWFnZXMgPSB7fTsNCgkJCUdNX3NldFZhbHVlKCJpMThuIiwgSlNPTi5zdHJpbmdpZnkoaTE4bikpOw0KCQl9DQoNCgkJaWYgKHNlY3Rpb24ubGVuZ3RoKSB7DQoJCQlmb3IgZWFjaCAodmFyIGxhbmcgaW4gc2VjdGlvbikgew0KCQkJCWlmIChsYW5nIGluIHJlcy5sYW5ndWFnZXMgJiYgaXRlbSBpbiByZXMubGFuZ3VhZ2VzW2xhbmddKSB7DQoJCQkJCXJldHVybiBjYihyZXMubGFuZ3VhZ2VzW2xhbmddW2l0ZW1dKTsNCgkJCQl9IGVsc2UgaWYgKGxhbmcgaW4gaTE4bi5sYW5ndWFnZXMgJiYgaXRlbSBpbiBpMThuLmxhbmd1YWdlc1tsYW5nXSkgew0KCQkJCQlyZXR1cm4gY2IoaTE4bi5sYW5ndWFnZXNbbGFuZ11baXRlbV0pOw0KCQkJCX0NCgkJCX0NCg0KCQkJdmFyIGRlZiA9IHJlc1siZGVmYXVsdCJdIHx8ICJlbiIsDQoJCQltZXRhID0gdHlwZW9mIEdNX2luZm8gIT0gInVuZGVmaW5lZCIgJiYgR01faW5mby5zY3JpcHRNZXRhU3RyIHx8ICIiOw0KCQkJDQoJCQl0cnkgew0KCQkJCW1ldGEgPSBHTV9nZXRSZXNvdXJjZVRleHQoIm1ldGEiKTsNCgkJCX0gY2F0Y2ggKGUpIHsgfQ0KDQoJCQltZXRhICs9ICJcbi8vIEBsYW5ndWFnZSAiICsgZGVmOw0KCQkJDQoJCQl2YXIgbWV0YUxhbmcgPSAvXlwvXC8gQGxhbmd1YWdlXHMrKFx3KykvbS50ZXN0KG1ldGEpICYmIFJlZ0V4cC4kMSwNCgkJCXRyYW5zbGF0ZSA9IGZ1bmN0aW9uICh0ZXh0LCBmcm9tLCB0bywgaXRlbSkgew0KCQkJCVRyYW5zbGF0ZS5leGVjdXRlKHRleHQucmVwbGFjZSgvXG4vZywgIjxiciAvPiIpLCBmcm9tLCB0bywgZnVuY3Rpb24gKHJlc3VsdCkgew0KCQkJCQlpZiAocmVzdWx0LnRyYW5zbGF0aW9uKSB7DQoJCQkJCQl2YXIgZGF0YSA9IEpTT04ucGFyc2UoR01fZ2V0VmFsdWUoImkxOG4iKSB8fCAneyJ2ZXJzaW9uIjowLCJsYW5ndWFnZXMiOnt9fScpOw0KDQoJCQkJCQlpZiAoISh0byBpbiBkYXRhLmxhbmd1YWdlcykpIHsNCgkJCQkJCQlkYXRhLmxhbmd1YWdlc1t0b10gPSB7fTsNCgkJCQkJCX0NCg0KCQkJCQkJZGF0YS5sYW5ndWFnZXNbdG9dW2l0ZW1dID0gcmVzdWx0LnRyYW5zbGF0aW9uLnJlcGxhY2UoL1xzKjxiclxzKlwvPz5ccyovZywgIlxuIik7DQoJCQkJCQkNCgkJCQkJCUdNX3NldFZhbHVlKCJpMThuIiwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpOw0KCQkJCQkJDQoJCQkJCQlyZXR1cm4gY2IoZGF0YS5sYW5ndWFnZXNbdG9dW2l0ZW1dKTsNCgkJCQkJfQ0KCQkJCX0pOw0KCQkJfTsNCg0KCQkJZm9yICh2YXIga2V5IGluIHNlY3Rpb24pIHsNCgkJCQlpZiAoZGVmIGluIHJlcy5sYW5ndWFnZXMgJiYgaXRlbSBpbiByZXMubGFuZ3VhZ2VzW2RlZl0gJiYgcmVzLmxhbmd1YWdlc1tkZWZdW2l0ZW1dICE9IG51bGwpIHsNCgkJCQkJdHJhbnNsYXRlKHJlcy5sYW5ndWFnZXNbZGVmXVtpdGVtXSwgZGVmLCBzZWN0aW9uW2tleV0sIGl0ZW0pOw0KDQoJCQkJCXJldHVybiBjYjIocmVzLmxhbmd1YWdlc1tkZWZdW2l0ZW1dKTsNCgkJCQl9DQoNCgkJCQlmb3IgKHZhciBsYW5nIGluIHJlcy5sYW5ndWFnZXMpIHsNCgkJCQkJaWYgKGxhbmcgIT0gZGVmICYmIGl0ZW0gaW4gcmVzLmxhbmd1YWdlc1tsYW5nXSAmJiByZXMubGFuZ3VhZ2VzW2xhbmddW2l0ZW1dICE9IG51bGwpIHsNCgkJCQkJCXRyYW5zbGF0ZShyZXMubGFuZ3VhZ2VzW2xhbmddW2l0ZW1dLCBsYW5nLCBzZWN0aW9uW2tleV0sIGl0ZW0pOw0KDQoJCQkJCQlyZXR1cm4gY2IyKHJlcy5sYW5ndWFnZXNbbGFuZ11baXRlbV0pOw0KCQkJCQl9DQoJCQkJfQ0KDQoJCQkJaWYgKG1ldGFMYW5nICE9IHNlY3Rpb25ba2V5XSkgew0KCQkJCQl0cmFuc2xhdGUoaXRlbV9zdHIsIG1ldGFMYW5nLCBzZWN0aW9uW2tleV0sIGl0ZW0pOw0KDQoJCQkJCXJldHVybiBjYjIoaXRlbV9zdHIpOw0KCQkJCX0NCgkJCX0NCgkJfQ0KDQoJCXJldHVybiBjYihpdGVtX3N0cik7DQoJfSwNCn07DQoNCmZ1bmN0aW9uIF9fICgpIHsNCglyZXR1cm4gSTE4bi5nZXQuYXBwbHkoSTE4biwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cykpOw0KfQ=="},{"meta":{"name":"87942.user.js","url":"https://userscripts-mirror.org/scripts/source/87942.user.js","ts":1696775833636,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"163374.user.js","url":"https://userscripts-mirror.org/scripts/source/163374.user.js","ts":1696775833371,"mimetype":"text/javascript"},"source":""}]},{"name":"Neopets - Search Helper","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://*.neopets.com/auctions.phtml*","*://*.neopets.com/closet.phtml*","*://*.neopets.com/dome/neopets.phtml*","*://*.neopets.com/faerieland/darkfaerie.phtml*","*://*.neopets.com/faerieland/employ/employment.phtml*","*://*.neopets.com/faerieland/hiddentower938.phtml","*://*.neopets.com/games/kadoatery/*","*://*.neopets.com/games/kadoatery/index.phtml","*://*.neopets.com/generalstore.phtml*","*://*.neopets.com/genie.phtml*","*://*.neopets.com/halloween/esophagor*.phtml*","*://*.neopets.com/halloween/witchtower*.phtml*","*://*.neopets.com/hospital.phtml","*://*.neopets.com/inventory.phtml*","*://*.neopets.com/island/*training.phtml?*type=status*","*://*.neopets.com/island/kitchen*.phtml*","*://*.neopets.com/island/tradingpost.phtml*","*://*.neopets.com/market.phtml*","*://*.neopets.com/market_your.phtml*","*://*.neopets.com/medieval/earthfaerie.phtml*","*://*.neopets.com/objects.phtml*","*://*.neopets.com/pirates/academy.phtml?type=status*","*://*.neopets.com/process_cash_object.phtml","*://*.neopets.com/quests.phtml","*://*.neopets.com/quickstock.phtml*","*://*.neopets.com/safetydeposit.phtml*","*://*.neopets.com/shops/wizard.phtml*","*://*.neopets.com/space/coincidence.phtml","*://*.neopets.com/winter/igloo2.phtml","*://*.neopets.com/winter/snowfaerie*.phtml*","*://*.neopets.com/questlog/"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_run_in":[]},"run_in":null,"tags":[]},"storage":{"ts":1697901671216,"data":{}},"enabled":true,"position":3,"file_url":"https://github.com/diceroll123/NeoSearchHelper/raw/master/searchhelper.user.js","uuid":"370b666b-94c6-4096-abb8-25130dcb03bd","source":""},{"name":"Neopets - NeoFoodClub+ <MettyNeo>","options":{"check_for_updates":false,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*neofood.club/*","https://www.neopets.com/pirates/foodclub.phtml?type=bet*","https://www.neopets.com/pirates/process_foodclub.phtml?*&type=bet*","https://www.neopets.com/pirates/foodclub.phtml?type=current_bets*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_run_in":[]},"user_modified":null,"run_in":null,"tags":[]},"storage":{"ts":1727455827959,"data":{"round":"s8963","beturl":"saudeapuxedpuiecuueeefucea","betstatus":"o{\"1\": \"Bet placed!\",\"2\": \"Bet placed!\",\"3\": \"Bet placed!\",\"4\": \"Bet placed!\",\"5\": \"Bet placed!\",\"6\": \"Bet placed!\",\"7\": \"Bet placed!\",\"8\": \"Bet placed!\",\"9\": \"Bet placed!\",\"10\": \"Bet placed!\"}","tabinfo":"o{\"https://www.neopets.com/pirates/process_foodclub.phtml?winner3=15&matches[]=3&bet_amount=12036&total_odds=2&winnings=24072&type=bet\": \"1\",\"https://www.neopets.com/pirates/process_foodclub.phtml?winner1=2&winner3=15&matches[]=1&matches[]=3&bet_amount=12036&total_odds=4&winnings=48144&type=bet\": \"2\",\"https://www.neopets.com/pirates/process_foodclub.phtml?winner1=2&winner3=15&winner5=4&matches[]=1&matches[]=3&matches[]=5&bet_amount=12036&total_odds=8&winnings=96288&type=bet\": \"3\",\"https://www.neopets.com/pirates/process_foodclub.phtml?winner1=2&winner3=15&winner5=12&matches[]=1&matches[]=3&matches[]=5&bet_amount=12036&total_odds=12&winnings=144432&type=bet\": \"4\",\"https://www.neopets.com/pirates/process_foodclub.phtml?winner1=2&winner3=15&winner5=9&matches[]=1&matches[]=3&matches[]=5&bet_amount=12036&total_odds=28&winnings=337008&type=bet\": \"5\",\"https://www.neopets.com/pirates/process_foodclub.phtml?winner1=2&winner3=15&winner5=8&matches[]=1&matches[]=3&matches[]=5&bet_amount=12036&total_odds=32&winnings=385152&type=bet\": \"6\",\"https://www.neopets.com/pirates/process_foodclub.phtml?winner1=14&winner3=15&matches[]=1&matches[]=3&bet_amount=12036&total_odds=12&winnings=144432&type=bet\": \"7\",\"https://www.neopets.com/pirates/process_foodclub.phtml?winner1=14&winner3=15&winner5=4&matches[]=1&matches[]=3&matches[]=5&bet_amount=12036&total_odds=24&winnings=288864&type=bet\": \"8\",\"https://www.neopets.com/pirates/process_foodclub.phtml?winner1=18&winner3=15&matches[]=1&matches[]=3&bet_amount=12036&total_odds=14&winnings=168504&type=bet\": \"9\",\"https://www.neopets.com/pirates/process_foodclub.phtml?winner1=10&winner3=15&matches[]=1&matches[]=3&bet_amount=12036&total_odds=16&winnings=192576&type=bet\": \"10\"}","placedbets":"o[{\"1\": \"Dan\",\"2\": \"Gooblah\",\"3\": null,\"4\": null,\"5\": null},{\"1\": null,\"2\": \"Gooblah\",\"3\": null,\"4\": null,\"5\": \"Tailhook\"},{\"1\": null,\"2\": \"Gooblah\",\"3\": null,\"4\": null,\"5\": \"Blackbeard\"},{\"1\": null,\"2\": \"Gooblah\",\"3\": null,\"4\": null,\"5\": \"Ned\"},{\"1\": null,\"2\": \"Gooblah\",\"3\": null,\"4\": \"Orvinn\",\"5\": null},{\"1\": null,\"2\": \"Gooblah\",\"3\": null,\"4\": \"Sproggie\",\"5\": null},{\"1\": null,\"2\": \"Gooblah\",\"3\": null,\"4\": \"Stripey\",\"5\": null},{\"1\": null,\"2\": \"Gooblah\",\"3\": null,\"4\": null,\"5\": null},{\"1\": \"Franchisco\",\"2\": \"Gooblah\",\"3\": null,\"4\": null,\"5\": null},{\"1\": null,\"2\": \"Gooblah\",\"3\": null,\"4\": null,\"5\": \"Edmund\"}]","toprocess":"n10"}},"enabled":true,"position":4,"file_url":"https://github.com/Mettymagic/np-userscripts/raw/main/Neopets%20-%20NeoFoodClub%2B.user.js","uuid":"539ccfa9-cbd4-4d7a-b490-2fe5c5143ddb","source":"","requires":[{"meta":{"name":"jquery.min.js","url":"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js","ts":1698065191788,"mimetype":"text/javascript"},"source":""}]},{"name":"Neopets Add Important Links","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["http://www.neopets.com/*","http://neopets.com/*","https://www.neopets.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_run_in":[]},"user_modified":null,"run_in":null,"tags":[]},"storage":{"ts":1698065339226,"data":{}},"enabled":true,"position":5,"uuid":"2b996769-47f6-4820-8d50-e073c2161e9a","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBOZW9wZXRzIEFkZCBJbXBvcnRhbnQgTGlua3MKLy8gQHZlcnNpb24gICAgICAxLjMKLy8gQGRlc2NyaXB0aW9uICBBZGRzIHNvbWUgbWlzc2luZyBsaW5rcyB0byB0aGUgc2lkZWJhcgovLyBAYXV0aG9yICAgICAgIEhhcnZleQovLyBAbWF0Y2ggICAgICAgIGh0dHA6Ly93d3cubmVvcGV0cy5jb20vKgovLyBAbWF0Y2ggICAgICAgIGh0dHA6Ly9uZW9wZXRzLmNvbS8qCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly93d3cubmVvcGV0cy5jb20vKgovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09Cgp2YXIgJCA9IHdpbmRvdy5qUXVlcnk7CgovL3JldHVybnMgdHJ1ZSBpZiB3aGl0ZQovL3JldHVybnMgZmFsc2UgaWYgYmxhY2sKZnVuY3Rpb24gZ2V0TGlua0h0bWwobGluayxpY29uLHRleHQpCnsKICAgIHZhciBsaW5rYWRkID0iPGEgaHJlZj1cIiIgK2xpbmsgKyAiXCI+PGxpIGNsYXNzPVwibmF2LWxpbmstbGVhdmUtYmV0YV9fMjAyMFwiIGRhdGEtdXJsPVwiLyIgKyBsaW5rICsgIlwiPjxkaXYgY2xhc3M9XCIiICsgaWNvbiArIlwiPjwvZGl2PiIgKyB0ZXh0ICsiPC9saT48L2E+IjsKICAgIHJldHVybiBsaW5rYWRkOwp9CgpmdW5jdGlvbiBhZGRMaW5rcygpCnsKICAgIHZhciBhZGRlZExpbmtzID0gIiI7CiAgICB2YXIgcXVpY2tyZWYgPSBnZXRMaW5rSHRtbCgicXVpY2tyZWYucGh0bWwiLCAibmF2LXBldGNlbnRyYWwtaWNvbl9fMjAyMCIsICJRdWlja3JlZiIpOwogICAgdmFyIHF1aWNrc3RvY2sgPSBnZXRMaW5rSHRtbCgicXVpY2tzdG9jay5waHRtbCIsICJuYXYtdXNlcmxvb2t1cC1pY29uX18yMDIwIiwgIlF1aWNrc3RvY2siKTsKICAgIHZhciBjdXN0b20gPSBnZXRMaW5rSHRtbCgiY3VzdG9taXNlLnBodG1sIiwgIm5hdi11c2VybG9va3VwLWljb25fXzIwMjAiLCAiQ3VzdG9taXphdGlvbiIpOwogICAgdmFyIHNkYiA9IGdldExpbmtIdG1sKCJzYWZldHlkZXBvc2l0LnBodG1sIiwgIm5hdi1pbnZlbnRvcnktaWNvbl9fMjAyMCIsICJTYWZldHkgRGVwb3NpdCBCb3giKTsKICAgIGFkZGVkTGlua3MgPSBhZGRlZExpbmtzICsgcXVpY2tyZWY7IC8vUXVpY2tyZWYgbGluawogICAgYWRkZWRMaW5rcyA9IGFkZGVkTGlua3MgKyBxdWlja3N0b2NrOyAvL1F1aWNrc3RvY2sgbGluawogICAgYWRkZWRMaW5rcyA9IGFkZGVkTGlua3MgKyBjdXN0b207IC8vQ3VzdG9taXphdGlvbiBsaW5rCiAgICBhZGRlZExpbmtzID0gYWRkZWRMaW5rcyArIHNkYjsgLy9TYWZldHkgZGVwb3NpdCBib3ggbGluawoKICAgIHZhciBhZGRJbnZMaW5rID0gIjxhIGhyZWY9XCJodHRwczovL3d3dy5uZW9wZXRzLmNvbS9pbnZlbnRvcnkucGh0bWxcIj48ZGl2IGNsYXNzPVwibmF2c3ViLW5wLW1ldGVyX18yMDIwXCIgc3R5bGU9XCJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7bWFyZ2luLXJpZ2h0OjVweDsgbWFyZ2luLWJvdHRvbTogMHB4O3RleHQtYWxpZ246Y2VudGVyO1wiPjxkaXYgY2xhc3M9XCJuYXZzdWItbnAtaWNvbl9fMjAyMFwiIHN0eWxlPVwiYmFja2dyb3VuZDpub25lIWltcG9ydGFudDtcIj48aW1nIHNyYz1cImh0dHBzOi8vaW1hZ2VzLm5lb3BldHMuY29tL3RoZW1lcy9oNS9oYXVudGVkd29vZHMvaW1hZ2VzL2ludmVudG9yeS1pY29uLnN2Z1wiIHdpZHRoPVwiMjVcIj48L2Rpdj48c3BhbiBjbGFzcz1cIm5wLXRleHRfXzIwMjBcIj5JbnZlbnRvcnk8L3NwYW4+PC9kaXY+PC9hPiIKCiAgICB2YXIgY2xvY2sgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJuYXYtcHJvZmlsZS1kcm9wZG93bi1jbG9ja19fMjAyMCIpWzBdOwoKICAgIGlmIChjbG9jayAhPSBudWxsKQogICAgewogICAgICAgIHZhciBmaXJzdFNldCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJuYXZwcm9maWxlZHJvcGRvd25fXzIwMjAiKTsKICAgICAgICB2YXIgbmV3RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpOwogICAgICAgIG5ld0VsLmlubmVySFRNTCA9IGFkZGVkTGlua3M7CiAgICAgICAgY2xvY2sucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3RWwsIGNsb2NrLm5leHRTaWJsaW5nLm5leHRTaWJsaW5nKTsKCiAgICAgICAgdmFyIGJhbmtMaW5rID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgibmF2c3ViLXJpZ2h0X18yMDIwIilbMF07CgoKICAgICAgICB2YXIgaW52RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CiAgICAgICAgaW52RWwuaW5uZXJIVE1MID0gYWRkSW52TGluazsKCiAgICAgICAgYmFua0xpbmsuaW5zZXJ0QmVmb3JlKGludkVsLCBiYW5rTGluay5jaGlsZHJlblswXSk7CiAgICB9Cn0KCgogICAgYWRkTGlua3MoKTs="},{"name":"Neopets - Active Pet Switch & Fishing Vortex Plus","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://*.neopets.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_run_in":[]},"run_in":null,"tags":[]},"storage":{"ts":1729359390850,"data":{"petlist":"o{\"Aitelier\": {\"name\": \"Aitelier\",\"species\": \"Eyrie\",\"color\": \"Purple\",\"img\": {\"noBG\": \"ttps://pets.neopets.com/cp/wgk8cqo6/1/9.png\",\"withBG\": \"//pets.neopets.com/cp/fczs6r5f/1/4.png\"},\"gender\": \"Male\",\"hp\": \"96/86\",\"level\": \"3\",\"hunger\": \"satiated\",\"mood\": \"extremely happy\",\"p2\": {\"name\": \"Dog\",\"species\": \"Mazzew\",\"img\": \"https://images.neopets.com/items/petpet_mazzew.gif\",\"p3\": null}},\"Cascayde\": {\"name\": \"Cascayde\",\"species\": \"Peophin\",\"color\": \"Oil Paint\",\"img\": {\"noBG\": \"ttps://pets.neopets.com/cp/fntrlxvl/1/9.png\",\"withBG\": \"//pets.neopets.com/cp/g9hg4jrf/1/4.png\"},\"gender\": \"Female\",\"hp\": \"12/12\",\"level\": \"1\",\"hunger\": \"bloated\",\"mood\": \"delighted!\",\"p2\": {\"name\": \"no name\",\"species\": \"Cloud Snowbunny\",\"img\": \"https://images.neopets.com/items/snowbunny_cloud.gif\",\"p3\": null}},\"Conversation\": {\"name\": \"Conversation\",\"species\": \"Vandagyre\",\"color\": \"Toy\",\"img\": {\"noBG\": \"ttps://pets.neopets.com/cp/f33jxj9f/1/9.png\",\"withBG\": \"//pets.neopets.com/cp/dr68cqlg/1/4.png\"},\"gender\": \"Female\",\"hp\": \"31/61\",\"level\": \"14\",\"hunger\": \"bloated\",\"mood\": \"delighted!\",\"p2\": {\"name\": \"Goober\",\"species\": \"Magma Screal\",\"img\": \"https://images.neopets.com/items/screal_magma.gif\",\"p3\": null}},\"Michirui\": {\"name\": \"Michirui\",\"species\": \"Xweetok\",\"color\": \"Faerie\",\"img\": {\"noBG\": \"ttps://pets.neopets.com/cp/c2sgr5gc/1/9.png\",\"withBG\": \"//pets.neopets.com/cp/ldwqmx5x/1/4.png\"},\"gender\": \"Female\",\"hp\": \"32/87\",\"level\": \"3\",\"hunger\": \"bloated\",\"mood\": \"delighted!\",\"p2\": {\"name\": \"Hydrangea\",\"species\": \"Blue Carmariller\",\"img\": \"https://images.neopets.com/items/carmariller_blue.gif\",\"p3\": null}},\"Oblacek\": {\"name\": \"Oblacek\",\"species\": \"Acara\",\"color\": \"Mutant\",\"img\": {\"noBG\": \"ttps://pets.neopets.com/cp/kj7k8j6q/2/9.png\",\"withBG\": \"//pets.neopets.com/cp/4sjvsdxo/2/4.png\"},\"gender\": \"Female\",\"hp\": \"319/309\",\"level\": \"261\",\"hunger\": \"satiated\",\"mood\": \"depressed\",\"p2\": {\"name\": \"Cuddles\",\"species\": \"Plushie Angelpuss\",\"img\": \"https://images.neopets.com/items/angelpuss_plushie.gif\",\"p3\": null}},\"Sneezings\": {\"name\": \"Sneezings\",\"species\": \"Pteri\",\"color\": \"Pink\",\"img\": {\"noBG\": \"ttps://pets.neopets.com/cp/ll5wkwol/1/9.png\",\"withBG\": \"//pets.neopets.com/cp/4j6h2cg8/1/4.png\"},\"gender\": \"Female\",\"hp\": \"19/24\",\"level\": \"3\",\"hunger\": \"bloated\",\"mood\": \"delighted!\",\"p2\": {\"name\": \"Fool\",\"species\": \"Huggy\",\"img\": \"https://images.neopets.com/items/pets_huggy.gif\",\"p3\": null}},\"YE5\": {\"name\": \"YE5\",\"species\": \"Aisha\",\"color\": \"Alien\",\"img\": {\"noBG\": \"ttps://pets.neopets.com/cp/w5zb4rd8/1/9.png\",\"withBG\": \"//pets.neopets.com/cp/nmdqmb54/1/4.png\"},\"gender\": \"Male\",\"hp\": \"19/20\",\"level\": \"1\",\"hunger\": \"bloated\",\"mood\": \"extremely happy\",\"p2\": {\"name\": \"Javascript\",\"species\": \"Robot Bython\",\"img\": \"https://images.neopets.com/items/bython_robot.gif\",\"p3\": null}}}","lastupdate":"n1729359390850","un":"scutepie3000","fishinglist":"o{\"Oblacek\": {\"lvl\": \"46\",\"xp\": 0,\"lasttime\": 1698155253288},\"Michirui\": {\"lvl\": \"3\",\"xp\": 0,\"lasttime\": 1698155260657}}"}},"enabled":true,"position":6,"file_url":"https://github.com/Mettymagic/np-userscripts/raw/main/Neopets%20-%20Active%20Pet%20Switch.user.js","uuid":"20c5a97b-eb0f-44f1-b054-f797299310d8","source":""},{"name":"Neopets Stock Highlighter","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://www.neopets.com/stockmarket.phtml?type=portfolio","http://www.neopets.com/stockmarket.phtml?type=portfolio"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_run_in":[]},"run_in":null,"tags":[]},"storage":{"ts":1698065416056,"data":{}},"enabled":true,"position":7,"file_url":"https://github.com/Meerca/Neopets-Userscripts/raw/main/stock-highlighter.user.js","uuid":"93cd3643-d2d0-4fb8-807a-9d05d4491d1a","source":""},{"name":"Neopets: Show Best Bargain Stocks","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["http*://www.neopets.com/stockmarket.phtml*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_run_in":[]},"run_in":null,"tags":[]},"storage":{"ts":1698065420324,"data":{}},"enabled":true,"position":8,"file_url":"https://github.com/Meerca/Neopets-Userscripts/raw/main/bargain-stocks.user.js","uuid":"469f637c-68ff-4443-97af-cc409f7e6f2d","source":""},{"name":"Neopets: Display Stock Price","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["http*://www.neopets.com/stockmarket.phtml?type=buy*","http*://www.neopets.com/stockmarket.phtml?ticker=*&type=buy*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_run_in":[]},"run_in":null,"tags":[]},"storage":{"ts":1698065426348,"data":{}},"enabled":true,"position":9,"file_url":"https://github.com/Meerca/Neopets-Userscripts/raw/main/stock-price.user.js","uuid":"f34b0fb9-07ed-4665-b226-14de189b730f","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBOZW9wZXRzOiBEaXNwbGF5IFN0b2NrIFByaWNlCi8vIEBhdXRob3IgICAgICAgSGlkZGVuaXN0Ci8vIEBuYW1lc3BhY2UgICAgaHR0cHM6Ly9oaWRkZW5pc3QuY29tCi8vIEB2ZXJzaW9uICAgICAgMjAyNC0wNy0yOQovLyBAZGVzY3JpcHRpb24gIERpc3BsYXlzIHRoZSBwcmljZSBvZiBOZW9wZXRzIHN0b2NrcyBvbiB0aGUgcHVyY2hhc2UgcGFnZSwgYW5kIHByZS1maWxsIHRoZSBudW1iZXIgb2Ygc2hhcmVzIHRvIG1heC4KLy8gQG1hdGNoICAgICAgICBodHRwKjovL3d3dy5uZW9wZXRzLmNvbS9zdG9ja21hcmtldC5waHRtbD90eXBlPWJ1eSoKLy8gQG1hdGNoICAgICAgICBodHRwKjovL3d3dy5uZW9wZXRzLmNvbS9zdG9ja21hcmtldC5waHRtbD90aWNrZXI9KiZ0eXBlPWJ1eSoKLy8gQGdyYW50ICAgICAgICBub25lCi8vIEB1cGRhdGVVUkwgICAgaHR0cHM6Ly9naXRodWIuY29tL01lZXJjYS9OZW9wZXRzLVVzZXJzY3JpcHRzL3Jhdy9tYWluL3N0b2NrLXByaWNlLnVzZXIuanMKLy8gQGRvd25sb2FkVVJMICBodHRwczovL2dpdGh1Yi5jb20vTWVlcmNhL05lb3BldHMtVXNlcnNjcmlwdHMvcmF3L21haW4vc3RvY2stcHJpY2UudXNlci5qcwovLyBAc3VwcG9ydFVSTCAgaHR0cHM6Ly9naXRodWIuY29tL01lZXJjYS9OZW9wZXRzLVVzZXJzY3JpcHRzL2lzc3VlcwovLyA9PS9Vc2VyU2NyaXB0PT0KCihmdW5jdGlvbigpIHsKICAoInVzZSBzdHJpY3QiKTsKCiAgY29uc3QgbnVtYmVyT2ZTaGFyZXMgPSAxMDAwOwogIGNvbnN0IG1pbkJ1eVByaWNlID0gZ2V0TWluUHVyY2hhc2VQcmljZSgpOwoKICBjb25zdCB1cGRhdGVkRXZlcnlNaW51dGVzID0gMzA7IC8vIGhvdyBvZnRlbiBOZW9wZXRzIHN0b2NrIHByaWNlcyB1cGRhdGUKICBjb25zdCBsb2FkVGltZSA9IG5ldyBEYXRlKCk7CiAgY29uc3QgcmVmcmVzaEludGVydmFsID0gMTAwMCAqIDYwICogNTsgLy8gNSBtaW51dGVzCiAgbGV0IHJlZnJlc2hUaW1lb3V0ID0gZmFsc2U7CgogIGNvbnN0IHB1cmNoYXNlRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoCiAgICAnZm9ybVthY3Rpb249InByb2Nlc3Nfc3RvY2ttYXJrZXQucGh0bWwiXScKICApOwogIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwoKICBmdW5jdGlvbiBpbml0KCkgewogICAgcHVyY2hhc2VGb3JtLnRpY2tlcl9zeW1ib2wucGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChkaXYpOwogICAgcHVyY2hhc2VGb3JtLmFtb3VudF9zaGFyZXMudmFsdWUgPSBudW1iZXJPZlNoYXJlczsKCiAgICBkaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIndoaXRlIjsKICAgIGRpdi5zdHlsZS5wYWRkaW5nID0gIjVweCI7CiAgICBkaXYuc3R5bGUuYm9yZGVyUmFkaXVzID0gIjVweCI7CiAgICBkaXYuc3R5bGUudGV4dEFsaWduID0gImNlbnRlciI7CgogICAgZGlzcGxheVRpY2tlckluZm8oKTsKICAgIHB1cmNoYXNlRm9ybS50aWNrZXJfc3ltYm9sLmFkZEV2ZW50TGlzdGVuZXIoImNoYW5nZSIsIGRpc3BsYXlUaWNrZXJJbmZvKTsKICAgIC8vIHdoZW4gcmUtZW50ZXJpbmcgdGFiLCBzaW5jZSB0aGUgcGFnZSBpcyBtb3N0IGxpa2VseSB0byBiZSBzdGFsZSB0aGVuCiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJ2aXNpYmlsaXR5Y2hhbmdlIiwgZGlzcGxheVRpY2tlckluZm8pOwogIH0KCiAgZnVuY3Rpb24gZ2V0VGlja2VyRW50cnkodGlja2VyKSB7CiAgICBsZXQgaXRlbSA9IGRvY3VtZW50LmV2YWx1YXRlKAogICAgICBgLy9tYXJxdWVlLy9iW3N0YXJ0cy13aXRoKC4sICIke3RpY2tlcn0gIildYCwKICAgICAgZG9jdW1lbnQsCiAgICAgIG51bGwsCiAgICAgIFhQYXRoUmVzdWx0LkZJUlNUX09SREVSRURfTk9ERV9UWVBFLAogICAgICBudWxsCiAgICApLnNpbmdsZU5vZGVWYWx1ZTsKCiAgICBpZiAoIWl0ZW0pIHsKICAgICAgY29uc29sZS5sb2coIk5vdGhpbmcgZm91bmQiKTsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgbGV0IG0gPSBpdGVtLnRleHRDb250ZW50Lm1hdGNoKAogICAgICAvKD88dGlja2VyPlx3KykgKD88cHJpY2U+XGQrKSAoPzxjaGFuZ2U+WytcLV1cZCspLwogICAgKTsKICAgIHJldHVybiBtLmdyb3VwczsKICB9CgogIGZ1bmN0aW9uIGdldFRpbWVEaWZmTWludXRlcygpIHsKICAgIGNvbnN0IHRpbWVOb3cgPSBuZXcgRGF0ZSgpOwogICAgY29uc3QgZGlmZk1zID0gdGltZU5vdy5nZXRUaW1lKCkgLSBsb2FkVGltZS5nZXRUaW1lKCk7CiAgICByZXR1cm4gTWF0aC5mbG9vcihkaWZmTXMgLyAxMDAwIC8gNjApOwogIH0KCiAgZnVuY3Rpb24gY2hlY2tTdGFsZW5lc3MoKSB7CiAgICBjb25zdCBtaW51dGVzU3RhbGUgPSBnZXRUaW1lRGlmZk1pbnV0ZXMoKTsKICAgIGlmIChtaW51dGVzU3RhbGUgPj0gdXBkYXRlZEV2ZXJ5TWludXRlcykgewogICAgICBkaXYuc3R5bGUuY29sb3IgPSAicmVkIjsKICAgICAgZGl2LnN0eWxlLmN1cnNvciA9ICJwb2ludGVyIjsKICAgICAgZGl2LmlubmVySFRNTCA9IGA8c3Ryb25nPuKdlyBSZWZyZXNoIHRoZSBwYWdlIOKdlzwvc3Ryb25nPjxicj48c21hbGw+PGVtPiR7bWludXRlc1N0YWxlfSBtaW51dGVzIHNpbmNlIHByaWNlcyB1cGRhdGVkPC9lbT48c21hbGw+YDsKICAgICAgZGl2LmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgZnVuY3Rpb24gKCkgewogICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpOwogICAgICB9KTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgZnVuY3Rpb24gZ2V0TWluUHVyY2hhc2VQcmljZShkZWZhdWx0VmFsdWUgPSAxNSkgewogICAgY29uc3QgcmVnZXggPSAvKFxkKykgTlAgcGVyIHNoYXJlLzsKICAgIGNvbnN0IG1lc3NhZ2UgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIi5jb250ZW50IGIiKSkuZmluZCgKICAgICAgKGIpID0+IHJlZ2V4LnRlc3QoYi50ZXh0Q29udGVudCkKICAgICk7CgogICAgaWYgKCFtZXNzYWdlKSB7CiAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7CiAgICB9CgogICAgY29uc3QgbWF0Y2hlcyA9IG1lc3NhZ2UudGV4dENvbnRlbnQubWF0Y2gocmVnZXgpOwogICAgaWYgKCFtYXRjaGVzKSB7CiAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7CiAgICB9CgogICAgY29uc3QgbWluUHJpY2UgPSBwYXJzZUludChtYXRjaGVzWzFdKTsKCiAgICBpZiAoaXNOYU4obWluUHJpY2UpIHx8IG1pblByaWNlIDwgMSkgewogICAgICByZXR1cm4gZGVmYXVsdFZhbHVlOwogICAgfQoKICAgIHJldHVybiBtaW5QcmljZTsKICB9CgogIGZ1bmN0aW9uIGRpc3BsYXlUaWNrZXJJbmZvKCkgewogICAgaWYgKHJlZnJlc2hUaW1lb3V0KSB7CiAgICAgIGNsZWFyVGltZW91dChyZWZyZXNoVGltZW91dCk7CiAgICB9CgogICAgaWYgKGNoZWNrU3RhbGVuZXNzKCkpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGNvbnN0IHRpY2tlciA9IHB1cmNoYXNlRm9ybS50aWNrZXJfc3ltYm9sLnZhbHVlOwogICAgY29uc3QgdGlja2VyRW50cnkgPSBnZXRUaWNrZXJFbnRyeSh0aWNrZXIpOwogICAgY29uc3Qgc2luY2VNaW51dGVzID0gZ2V0VGltZURpZmZNaW51dGVzKCk7CiAgICBjb25zdCB0aW1lU2luY2UgPQogICAgICBzaW5jZU1pbnV0ZXMgPT0gMAogICAgICAgID8gImp1c3Qgbm93IgogICAgICAgIDogYCR7c2luY2VNaW51dGVzfSBtaW51dGUke3NpbmNlTWludXRlcyA9PSAxID8gIiIgOiAicyJ9IGFnb2A7CgogICAgaWYgKCF0aWNrZXIpIHsKICAgICAgZGl2LmlubmVySFRNTCA9ICIiOwogICAgICBkaXYuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgICAgcmV0dXJuOwogICAgfSBlbHNlIHsKICAgICAgZGl2LnN0eWxlLmRpc3BsYXkgPSAiIjsKICAgIH0KCiAgICBkaXYudGl0bGUgPSAiIjsKCiAgICBpZiAoIXRpY2tlckVudHJ5KSB7CiAgICAgIGRpdi5pbm5lckhUTUwgPSBgPHNtYWxsPuKaoO+4jzxlbT5DYW4ndCBmaW5kICR7dGlja2VyfTwvZW0+PC9zbWFsbD5gOwogICAgICBkaXYuc3R5bGUuY29sb3IgPSAicmVkIjsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIGxldCBlbW9qaSA9ICIiOwogICAgaWYgKHRpY2tlckVudHJ5LnByaWNlIDwgbWluQnV5UHJpY2UpIHsKICAgICAgZGl2LnN0eWxlLmNvbG9yID0gInJlZCI7CiAgICAgIGVtb2ppID0gIuKblCI7CiAgICAgIGRpdi50aXRsZSA9CiAgICAgICAgIlRoaXMgc3RvY2sgaXMgbGVzcyB0aGFuIHRoZSBtaW5pbXVtIHB1cmNoYXNlIHByaWNlIC0geW91IGNhbid0IGJ1eSBpdCI7CiAgICB9IGVsc2UgaWYgKHRpY2tlckVudHJ5LnByaWNlID4gbWluQnV5UHJpY2UpIHsKICAgICAgZGl2LnN0eWxlLmNvbG9yID0gIm9yYW5nZSI7CiAgICAgIGVtb2ppID0gIuKaoO+4jyI7CiAgICAgIGRpdi50aXRsZSA9ICJUaGlzIHN0b2NrIGNvc3RzIG1vcmUgdGhhbiB0aGUgbWluaW11bSBwdXJjaGFzZSBwcmljZSI7CiAgICB9IGVsc2UgewogICAgICBkaXYuc3R5bGUuY29sb3IgPSAiZ3JlZW4iOwogICAgICBlbW9qaSA9ICLinYfvuI8iOwogICAgICBkaXYudGl0bGUgPSAiTmljZSEgVGhpcyBzdG9jayBpcyB0aGUgc2FtZSBhcyB0aGUgbWluaW11bSBwdXJjaGFzZSBwcmljZS4iOwogICAgfQoKICAgIGRpdi5pbm5lckhUTUwgPSBgPHN0cm9uZz4ke2Vtb2ppfSBDb3N0OiAke3RpY2tlckVudHJ5LnByaWNlfSBOUDwvc3Ryb25nPiAke2Vtb2ppfTxicj48c21hbGw+PGVtPmZvciAke3RpY2tlcn0gJHt0aW1lU2luY2V9PC9lbT48L3NtYWxsPmA7CgogICAgcmVmcmVzaFRpbWVvdXQgPSBzZXRUaW1lb3V0KGRpc3BsYXlUaWNrZXJJbmZvLCByZWZyZXNoSW50ZXJ2YWwpOwoKICAgIHJldHVybiB0cnVlOwogIH0KCiAgaW5pdCgpOwp9KSgpOwo="},{"name":"Text Highlighter - Dynamic","options":{"check_for_updates":false,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":["https://www.neopets.com/*","https://items.jellyneo.net/*"],"orig_includes":["https://greasyfork.org/*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_run_in":[]},"user_modified":null,"run_in":null,"tags":[]},"storage":{"ts":1698411997530,"data":{}},"enabled":false,"position":10,"file_url":"https://greasyfork.org/scripts/3719-text-highlighter-dynamic/code/Text%20Highlighter%20-%20Dynamic.user.js","uuid":"a5ad4717-54fb-4e06-bdd6-1ef38aedc676","source":""},{"name":"Local YouTube Downloader","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":["googlevideo.com"],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-end","orig_noframes":null,"orig_run_in":[]},"user_modified":null,"run_in":null,"tags":[]},"storage":{"ts":1698412282815,"data":{}},"enabled":true,"position":11,"file_url":"https://greasyfork.org/scripts/369400-local-youtube-downloader/code/Local%20YouTube%20Downloader.user.js","uuid":"2b8a139d-ebd9-41c9-9899-3a4729d8b3a7","source":"","requires":[{"meta":{"name":"vue.js","url":"https://unpkg.com/vue@2.6.10/dist/vue.js","ts":1698548178657,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"xfetch.min.js","url":"https://unpkg.com/xfetch-js@0.3.4/xfetch.min.js","ts":1698548178659,"mimetype":"text/javascript"},"source":"KChhLGIpPT57ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sYik6Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPWIoKTphLnhmPWIoKX0pKHRoaXMsKCk9Pntjb25zdCBhPVsiZ2V0IiwicG9zdCIsInB1dCIsInBhdGNoIiwiZGVsZXRlIiwiaGVhZCJdO2NsYXNzIGIgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihhKXtzdXBlcihhLnN0YXR1c1RleHQpLHRoaXMubmFtZT0iSFRUUEVycm9yIix0aGlzLnJlc3BvbnNlPWF9fWNsYXNzIGMgZXh0ZW5kcyBQcm9taXNle31mb3IoY29uc3QgYSBvZlsiYXJyYXlCdWZmZXIiLCJibG9iIiwiZm9ybURhdGEiLCJqc29uIiwidGV4dCJdKWMucHJvdG90eXBlW2FdPWZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLnRoZW4oYj0+YlthXSgpKS50aGVuKGJ8fChhPT5hKSl9O2NvbnN0e2Fzc2lnbjpkfT1PYmplY3QsZT1hPT5hLnJlZHVjZSgoYSxbYixjXSk9PihhW2JdPWMsYSkse30pLGY9KC4uLmEpPT5iPT5hLnNvbWUoYT0+InN0cmluZyI9PXR5cGVvZiBhP3R5cGVvZiBiPT1hOmIgaW5zdGFuY2VvZiBhKSxnPWYoInN0cmluZyIpLGg9Zigib2JqZWN0IiksaT1hPT5nKGEpfHxoKGEpLGo9YT0+e2lmKCFhLm9rKXRocm93IG5ldyBiKGEpO3JldHVybiBhfSxrPShoPXt9KT0+e2NvbnN0IGw9KGEsYj17fSk9PntkKGIsaCk7Y29uc3Qgaz1hPT5uZXcgYi5VUkxTZWFyY2hQYXJhbXMoYSkudG9TdHJpbmcoKSxsPW5ldyBiLlVSTChhLGIuYmFzZVVSSXx8dm9pZCAwKTtpZihiLmhlYWRlcnM/ZihiLkhlYWRlcnMpKGIuaGVhZGVycykmJihiLmhlYWRlcnM9ZShbLi4uYi5oZWFkZXJzLmVudHJpZXMoKV0pKTpiLmhlYWRlcnM9e30sYi5qc29uKWIuYm9keT1KU09OLnN0cmluZ2lmeShiLmpzb24pLGIuaGVhZGVyc1siQ29udGVudC1UeXBlIl09ImFwcGxpY2F0aW9uL2pzb24iO2Vsc2UgaWYoaShiLnVybGVuY29kZWQpKWIuYm9keT1nKGIudXJsZW5jb2RlZCk/Yi51cmxlbmNvZGVkOmsoYi51cmxlbmNvZGVkKSxiLmhlYWRlcnNbIkNvbnRlbnQtVHlwZSJdPSJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiO2Vsc2UgaWYoZihiLkZvcm1EYXRhLCJvYmplY3QiKShiLmZvcm1EYXRhKSl7aWYoIWYoYi5Gb3JtRGF0YSkoYi5mb3JtRGF0YSkpe2NvbnN0IGE9bmV3IGIuRm9ybURhdGE7Zm9yKGNvbnN0W2MsZF1vZiBPYmplY3QuZW50cmllcyhiLmZvcm1EYXRhKSlhLmFwcGVuZChjLGQpO2IuZm9ybURhdGE9YX1iLmJvZHk9Yi5mb3JtRGF0YX1yZXR1cm4gYi5xcyYmKGcoYi5xcykmJihiLnFzPShhPT5lKFsuLi5uZXcgYi5VUkxTZWFyY2hQYXJhbXMoYSkuZW50cmllcygpXSkpKGIucXMpKSxsLnNlYXJjaD1rKGQoZShbLi4ubC5zZWFyY2hQYXJhbXMuZW50cmllcygpXSksYi5xcykpKSxiLmNyZWRlbnRpYWxzfHwoYi5jcmVkZW50aWFscz0ic2FtZS1vcmlnaW4iKSxjLnJlc29sdmUoYi5mZXRjaChsLGIpLnRoZW4oaikpfTtmb3IoY29uc3QgYiBvZiBhKWxbYl09KGEsYz17fSk9PihjLm1ldGhvZD1iLnRvVXBwZXJDYXNlKCksbChhLGMpKTtyZXR1cm4gbC5leHRlbmQ9YT0+ayhkKHt9LGgsYSkpLGwuSFRUUEVycm9yPWIsbH0sbD0idW5kZWZpbmVkIiE9dHlwZW9mIGRvY3VtZW50LG09InVuZGVmaW5lZCIhPXR5cGVvZiBzZWxmO3JldHVybiBtP2soe2ZldGNoOmZldGNoLmJpbmQoc2VsZiksVVJMLFJlc3BvbnNlLFVSTFNlYXJjaFBhcmFtcyxIZWFkZXJzLEZvcm1EYXRhLGJhc2VVUkk6bD9kb2N1bWVudC5iYXNlVVJJOiIifSk6aygpfSk7"},{"meta":{"name":"ffmpeg.min.js","url":"https://unpkg.com/@ffmpeg/ffmpeg@0.6.1/dist/ffmpeg.min.js","ts":1698548178661,"mimetype":"text/javascript"},"source":"IWZ1bmN0aW9uKHQsZSl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sZSk6Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuRkZtcGVnPWUoKTp0LkZGbXBlZz1lKCl9KHdpbmRvdywoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9e307ZnVuY3Rpb24gcihuKXtpZihlW25dKXJldHVybiBlW25dLmV4cG9ydHM7dmFyIG89ZVtuXT17aTpuLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIHRbbl0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsciksby5sPSEwLG8uZXhwb3J0c31yZXR1cm4gci5tPXQsci5jPWUsci5kPWZ1bmN0aW9uKHQsZSxuKXtyLm8odCxlKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7ZW51bWVyYWJsZTohMCxnZXQ6bn0pfSxyLnI9ZnVuY3Rpb24odCl7InVuZGVmaW5lZCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZToiTW9kdWxlIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KX0sci50PWZ1bmN0aW9uKHQsZSl7aWYoMSZlJiYodD1yKHQpKSw4JmUpcmV0dXJuIHQ7aWYoNCZlJiYib2JqZWN0Ij09dHlwZW9mIHQmJnQmJnQuX19lc01vZHVsZSlyZXR1cm4gdDt2YXIgbj1PYmplY3QuY3JlYXRlKG51bGwpO2lmKHIucihuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobiwiZGVmYXVsdCIse2VudW1lcmFibGU6ITAsdmFsdWU6dH0pLDImZSYmInN0cmluZyIhPXR5cGVvZiB0KWZvcih2YXIgbyBpbiB0KXIuZChuLG8sZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19LmJpbmQobnVsbCxvKSk7cmV0dXJuIG59LHIubj1mdW5jdGlvbih0KXt2YXIgZT10JiZ0Ll9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gdC5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiB0fTtyZXR1cm4gci5kKGUsImEiLGUpLGV9LHIubz1mdW5jdGlvbih0LGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKX0sci5wPSIiLHIoci5zPTQpfShbZnVuY3Rpb24odCxlKXt2YXIgcixuLG89dC5leHBvcnRzPXt9O2Z1bmN0aW9uIGkoKXt0aHJvdyBuZXcgRXJyb3IoInNldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQiKX1mdW5jdGlvbiBhKCl7dGhyb3cgbmV3IEVycm9yKCJjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQiKX1mdW5jdGlvbiBjKHQpe2lmKHI9PT1zZXRUaW1lb3V0KXJldHVybiBzZXRUaW1lb3V0KHQsMCk7aWYoKHI9PT1pfHwhcikmJnNldFRpbWVvdXQpcmV0dXJuIHI9c2V0VGltZW91dCxzZXRUaW1lb3V0KHQsMCk7dHJ5e3JldHVybiByKHQsMCl9Y2F0Y2goZSl7dHJ5e3JldHVybiByLmNhbGwobnVsbCx0LDApfWNhdGNoKGUpe3JldHVybiByLmNhbGwodGhpcyx0LDApfX19IWZ1bmN0aW9uKCl7dHJ5e3I9ImZ1bmN0aW9uIj09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDppfWNhdGNoKHQpe3I9aX10cnl7bj0iZnVuY3Rpb24iPT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDphfWNhdGNoKHQpe249YX19KCk7dmFyIHUscz1bXSxmPSExLGw9LTE7ZnVuY3Rpb24gcCgpe2YmJnUmJihmPSExLHUubGVuZ3RoP3M9dS5jb25jYXQocyk6bD0tMSxzLmxlbmd0aCYmZCgpKX1mdW5jdGlvbiBkKCl7aWYoIWYpe3ZhciB0PWMocCk7Zj0hMDtmb3IodmFyIGU9cy5sZW5ndGg7ZTspe2Zvcih1PXMscz1bXTsrK2w8ZTspdSYmdVtsXS5ydW4oKTtsPS0xLGU9cy5sZW5ndGh9dT1udWxsLGY9ITEsZnVuY3Rpb24odCl7aWYobj09PWNsZWFyVGltZW91dClyZXR1cm4gY2xlYXJUaW1lb3V0KHQpO2lmKChuPT09YXx8IW4pJiZjbGVhclRpbWVvdXQpcmV0dXJuIG49Y2xlYXJUaW1lb3V0LGNsZWFyVGltZW91dCh0KTt0cnl7bih0KX1jYXRjaChlKXt0cnl7cmV0dXJuIG4uY2FsbChudWxsLHQpfWNhdGNoKGUpe3JldHVybiBuLmNhbGwodGhpcyx0KX19fSh0KX19ZnVuY3Rpb24gaCh0LGUpe3RoaXMuZnVuPXQsdGhpcy5hcnJheT1lfWZ1bmN0aW9uIHkoKXt9by5uZXh0VGljaz1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpZm9yKHZhciByPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyllW3ItMV09YXJndW1lbnRzW3JdO3MucHVzaChuZXcgaCh0LGUpKSwxIT09cy5sZW5ndGh8fGZ8fGMoZCl9LGgucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSl9LG8udGl0bGU9ImJyb3dzZXIiLG8uYnJvd3Nlcj0hMCxvLmVudj17fSxvLmFyZ3Y9W10sby52ZXJzaW9uPSIiLG8udmVyc2lvbnM9e30sby5vbj15LG8uYWRkTGlzdGVuZXI9eSxvLm9uY2U9eSxvLm9mZj15LG8ucmVtb3ZlTGlzdGVuZXI9eSxvLnJlbW92ZUFsbExpc3RlbmVycz15LG8uZW1pdD15LG8ucHJlcGVuZExpc3RlbmVyPXksby5wcmVwZW5kT25jZUxpc3RlbmVyPXksby5saXN0ZW5lcnM9ZnVuY3Rpb24odCl7cmV0dXJuW119LG8uYmluZGluZz1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkIil9LG8uY3dkPWZ1bmN0aW9uKCl7cmV0dXJuIi8ifSxvLmNoZGlyPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcigicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkIil9LG8udW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbixvO3ZvaWQgMD09PShvPSJmdW5jdGlvbiI9PXR5cGVvZihuPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aDtpZigwPT09dCl0aHJvdyBuZXcgRXJyb3IoInJlc29sdmVVcmwgcmVxdWlyZXMgYXQgbGVhc3Qgb25lIGFyZ3VtZW50OyBnb3Qgbm9uZS4iKTt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJiYXNlIik7aWYoZS5ocmVmPWFyZ3VtZW50c1swXSwxPT09dClyZXR1cm4gZS5ocmVmO3ZhciByPWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJoZWFkIilbMF07ci5pbnNlcnRCZWZvcmUoZSxyLmZpcnN0Q2hpbGQpO2Zvcih2YXIgbixvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKSxpPTE7aTx0O2krKylvLmhyZWY9YXJndW1lbnRzW2ldLG49by5ocmVmLGUuaHJlZj1uO3JldHVybiByLnJlbW92ZUNoaWxkKGUpLG59fSk/bi5jYWxsKGUscixlLHQpOm4pfHwodC5leHBvcnRzPW8pfSxmdW5jdGlvbih0LGUpe3ZhciByPXRoaXMsbj0hMTtlLmxvZ2dpbmc9bixlLnNldExvZ2dpbmc9ZnVuY3Rpb24odCl7bj10fSxlLmxvZz1mdW5jdGlvbigpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGU9bmV3IEFycmF5KHQpLG89MDtvPHQ7bysrKWVbb109YXJndW1lbnRzW29dO3JldHVybiBuP2NvbnNvbGUubG9nLmFwcGx5KHIsZSk6bnVsbH19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIiIuY29uY2F0KHQsIi0iKS5jb25jYXQoZSwiLSIpLmNvbmNhdChNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDE2KS5zbGljZSgzLDgpKX19LGZ1bmN0aW9uKHQsZSxyKXtyKDUpO3ZhciBuPXIoMiksbz1uLmxvZ2dpbmcsaT1uLnNldExvZ2dpbmcsYT1yKDYpO3QuZXhwb3J0cz17bG9nZ2luZzpvLHNldExvZ2dpbmc6aSxjcmVhdGVXb3JrZXI6YX19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1mdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIGU9T2JqZWN0LnByb3RvdHlwZSxyPWUuaGFzT3duUHJvcGVydHksbj0iZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sP1N5bWJvbDp7fSxvPW4uaXRlcmF0b3J8fCJAQGl0ZXJhdG9yIixpPW4uYXN5bmNJdGVyYXRvcnx8IkBAYXN5bmNJdGVyYXRvciIsYT1uLnRvU3RyaW5nVGFnfHwiQEB0b1N0cmluZ1RhZyI7ZnVuY3Rpb24gYyh0LGUscixuKXt2YXIgbz1lJiZlLnByb3RvdHlwZSBpbnN0YW5jZW9mIGY/ZTpmLGk9T2JqZWN0LmNyZWF0ZShvLnByb3RvdHlwZSksYT1uZXcgaihufHxbXSk7cmV0dXJuIGkuX2ludm9rZT1mdW5jdGlvbih0LGUscil7dmFyIG49InN1c3BlbmRlZFN0YXJ0IjtyZXR1cm4gZnVuY3Rpb24obyxpKXtpZigiZXhlY3V0aW5nIj09PW4pdGhyb3cgbmV3IEVycm9yKCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nIik7aWYoImNvbXBsZXRlZCI9PT1uKXtpZigidGhyb3ciPT09byl0aHJvdyBpO3JldHVybiBrKCl9Zm9yKHIubWV0aG9kPW8sci5hcmc9aTs7KXt2YXIgYT1yLmRlbGVnYXRlO2lmKGEpe3ZhciBjPWIoYSxyKTtpZihjKXtpZihjPT09cyljb250aW51ZTtyZXR1cm4gY319aWYoIm5leHQiPT09ci5tZXRob2Qpci5zZW50PXIuX3NlbnQ9ci5hcmc7ZWxzZSBpZigidGhyb3ciPT09ci5tZXRob2Qpe2lmKCJzdXNwZW5kZWRTdGFydCI9PT1uKXRocm93IG49ImNvbXBsZXRlZCIsci5hcmc7ci5kaXNwYXRjaEV4Y2VwdGlvbihyLmFyZyl9ZWxzZSJyZXR1cm4iPT09ci5tZXRob2QmJnIuYWJydXB0KCJyZXR1cm4iLHIuYXJnKTtuPSJleGVjdXRpbmciO3ZhciBmPXUodCxlLHIpO2lmKCJub3JtYWwiPT09Zi50eXBlKXtpZihuPXIuZG9uZT8iY29tcGxldGVkIjoic3VzcGVuZGVkWWllbGQiLGYuYXJnPT09cyljb250aW51ZTtyZXR1cm57dmFsdWU6Zi5hcmcsZG9uZTpyLmRvbmV9fSJ0aHJvdyI9PT1mLnR5cGUmJihuPSJjb21wbGV0ZWQiLHIubWV0aG9kPSJ0aHJvdyIsci5hcmc9Zi5hcmcpfX19KHQscixhKSxpfWZ1bmN0aW9uIHUodCxlLHIpe3RyeXtyZXR1cm57dHlwZToibm9ybWFsIixhcmc6dC5jYWxsKGUscil9fWNhdGNoKHQpe3JldHVybnt0eXBlOiJ0aHJvdyIsYXJnOnR9fX10LndyYXA9Yzt2YXIgcz17fTtmdW5jdGlvbiBmKCl7fWZ1bmN0aW9uIGwoKXt9ZnVuY3Rpb24gcCgpe312YXIgZD17fTtkW29dPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3ZhciBoPU9iamVjdC5nZXRQcm90b3R5cGVPZix5PWgmJmgoaChPKFtdKSkpO3kmJnkhPT1lJiZyLmNhbGwoeSxvKSYmKGQ9eSk7dmFyIGc9cC5wcm90b3R5cGU9Zi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShkKTtmdW5jdGlvbiB2KHQpe1sibmV4dCIsInRocm93IiwicmV0dXJuIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7dFtlXT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5faW52b2tlKGUsdCl9fSkpfWZ1bmN0aW9uIG0odCl7dmFyIGU7dGhpcy5faW52b2tlPWZ1bmN0aW9uKG4sbyl7ZnVuY3Rpb24gaSgpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSxpKXshZnVuY3Rpb24gZShuLG8saSxhKXt2YXIgYz11KHRbbl0sdCxvKTtpZigidGhyb3ciIT09Yy50eXBlKXt2YXIgcz1jLmFyZyxmPXMudmFsdWU7cmV0dXJuIGYmJiJvYmplY3QiPT10eXBlb2YgZiYmci5jYWxsKGYsIl9fYXdhaXQiKT9Qcm9taXNlLnJlc29sdmUoZi5fX2F3YWl0KS50aGVuKChmdW5jdGlvbih0KXtlKCJuZXh0Iix0LGksYSl9KSwoZnVuY3Rpb24odCl7ZSgidGhyb3ciLHQsaSxhKX0pKTpQcm9taXNlLnJlc29sdmUoZikudGhlbigoZnVuY3Rpb24odCl7cy52YWx1ZT10LGkocyl9KSwoZnVuY3Rpb24odCl7cmV0dXJuIGUoInRocm93Iix0LGksYSl9KSl9YShjLmFyZyl9KG4sbyxlLGkpfSkpfXJldHVybiBlPWU/ZS50aGVuKGksaSk6aSgpfX1mdW5jdGlvbiBiKHQsZSl7dmFyIHI9dC5pdGVyYXRvcltlLm1ldGhvZF07aWYodm9pZCAwPT09cil7aWYoZS5kZWxlZ2F0ZT1udWxsLCJ0aHJvdyI9PT1lLm1ldGhvZCl7aWYodC5pdGVyYXRvci5yZXR1cm4mJihlLm1ldGhvZD0icmV0dXJuIixlLmFyZz12b2lkIDAsYih0LGUpLCJ0aHJvdyI9PT1lLm1ldGhvZCkpcmV0dXJuIHM7ZS5tZXRob2Q9InRocm93IixlLmFyZz1uZXcgVHlwZUVycm9yKCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kIil9cmV0dXJuIHN9dmFyIG49dShyLHQuaXRlcmF0b3IsZS5hcmcpO2lmKCJ0aHJvdyI9PT1uLnR5cGUpcmV0dXJuIGUubWV0aG9kPSJ0aHJvdyIsZS5hcmc9bi5hcmcsZS5kZWxlZ2F0ZT1udWxsLHM7dmFyIG89bi5hcmc7cmV0dXJuIG8/by5kb25lPyhlW3QucmVzdWx0TmFtZV09by52YWx1ZSxlLm5leHQ9dC5uZXh0TG9jLCJyZXR1cm4iIT09ZS5tZXRob2QmJihlLm1ldGhvZD0ibmV4dCIsZS5hcmc9dm9pZCAwKSxlLmRlbGVnYXRlPW51bGwscyk6bzooZS5tZXRob2Q9InRocm93IixlLmFyZz1uZXcgVHlwZUVycm9yKCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdCIpLGUuZGVsZWdhdGU9bnVsbCxzKX1mdW5jdGlvbiB3KHQpe3ZhciBlPXt0cnlMb2M6dFswXX07MSBpbiB0JiYoZS5jYXRjaExvYz10WzFdKSwyIGluIHQmJihlLmZpbmFsbHlMb2M9dFsyXSxlLmFmdGVyTG9jPXRbM10pLHRoaXMudHJ5RW50cmllcy5wdXNoKGUpfWZ1bmN0aW9uIHgodCl7dmFyIGU9dC5jb21wbGV0aW9ufHx7fTtlLnR5cGU9Im5vcm1hbCIsZGVsZXRlIGUuYXJnLHQuY29tcGxldGlvbj1lfWZ1bmN0aW9uIGoodCl7dGhpcy50cnlFbnRyaWVzPVt7dHJ5TG9jOiJyb290In1dLHQuZm9yRWFjaCh3LHRoaXMpLHRoaXMucmVzZXQoITApfWZ1bmN0aW9uIE8odCl7aWYodCl7dmFyIGU9dFtvXTtpZihlKXJldHVybiBlLmNhbGwodCk7aWYoImZ1bmN0aW9uIj09dHlwZW9mIHQubmV4dClyZXR1cm4gdDtpZighaXNOYU4odC5sZW5ndGgpKXt2YXIgbj0tMSxpPWZ1bmN0aW9uIGUoKXtmb3IoOysrbjx0Lmxlbmd0aDspaWYoci5jYWxsKHQsbikpcmV0dXJuIGUudmFsdWU9dFtuXSxlLmRvbmU9ITEsZTtyZXR1cm4gZS52YWx1ZT12b2lkIDAsZS5kb25lPSEwLGV9O3JldHVybiBpLm5leHQ9aX19cmV0dXJue25leHQ6a319ZnVuY3Rpb24gaygpe3JldHVybnt2YWx1ZTp2b2lkIDAsZG9uZTohMH19cmV0dXJuIGwucHJvdG90eXBlPWcuY29uc3RydWN0b3I9cCxwLmNvbnN0cnVjdG9yPWwscFthXT1sLmRpc3BsYXlOYW1lPSJHZW5lcmF0b3JGdW5jdGlvbiIsdC5pc0dlbmVyYXRvckZ1bmN0aW9uPWZ1bmN0aW9uKHQpe3ZhciBlPSJmdW5jdGlvbiI9PXR5cGVvZiB0JiZ0LmNvbnN0cnVjdG9yO3JldHVybiEhZSYmKGU9PT1sfHwiR2VuZXJhdG9yRnVuY3Rpb24iPT09KGUuZGlzcGxheU5hbWV8fGUubmFtZSkpfSx0Lm1hcms9ZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCxwKToodC5fX3Byb3RvX189cCxhIGluIHR8fCh0W2FdPSJHZW5lcmF0b3JGdW5jdGlvbiIpKSx0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcpLHR9LHQuYXdyYXA9ZnVuY3Rpb24odCl7cmV0dXJue19fYXdhaXQ6dH19LHYobS5wcm90b3R5cGUpLG0ucHJvdG90eXBlW2ldPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LHQuQXN5bmNJdGVyYXRvcj1tLHQuYXN5bmM9ZnVuY3Rpb24oZSxyLG4sbyl7dmFyIGk9bmV3IG0oYyhlLHIsbixvKSk7cmV0dXJuIHQuaXNHZW5lcmF0b3JGdW5jdGlvbihyKT9pOmkubmV4dCgpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiB0LmRvbmU/dC52YWx1ZTppLm5leHQoKX0pKX0sdihnKSxnW2FdPSJHZW5lcmF0b3IiLGdbb109ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sZy50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiJbb2JqZWN0IEdlbmVyYXRvcl0ifSx0LmtleXM9ZnVuY3Rpb24odCl7dmFyIGU9W107Zm9yKHZhciByIGluIHQpZS5wdXNoKHIpO3JldHVybiBlLnJldmVyc2UoKSxmdW5jdGlvbiByKCl7Zm9yKDtlLmxlbmd0aDspe3ZhciBuPWUucG9wKCk7aWYobiBpbiB0KXJldHVybiByLnZhbHVlPW4sci5kb25lPSExLHJ9cmV0dXJuIHIuZG9uZT0hMCxyfX0sdC52YWx1ZXM9TyxqLnByb3RvdHlwZT17Y29uc3RydWN0b3I6aixyZXNldDpmdW5jdGlvbih0KXtpZih0aGlzLnByZXY9MCx0aGlzLm5leHQ9MCx0aGlzLnNlbnQ9dGhpcy5fc2VudD12b2lkIDAsdGhpcy5kb25lPSExLHRoaXMuZGVsZWdhdGU9bnVsbCx0aGlzLm1ldGhvZD0ibmV4dCIsdGhpcy5hcmc9dm9pZCAwLHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHgpLCF0KWZvcih2YXIgZSBpbiB0aGlzKSJ0Ij09PWUuY2hhckF0KDApJiZyLmNhbGwodGhpcyxlKSYmIWlzTmFOKCtlLnNsaWNlKDEpKSYmKHRoaXNbZV09dm9pZCAwKX0sc3RvcDpmdW5jdGlvbigpe3RoaXMuZG9uZT0hMDt2YXIgdD10aGlzLnRyeUVudHJpZXNbMF0uY29tcGxldGlvbjtpZigidGhyb3ciPT09dC50eXBlKXRocm93IHQuYXJnO3JldHVybiB0aGlzLnJ2YWx9LGRpc3BhdGNoRXhjZXB0aW9uOmZ1bmN0aW9uKHQpe2lmKHRoaXMuZG9uZSl0aHJvdyB0O3ZhciBlPXRoaXM7ZnVuY3Rpb24gbihyLG4pe3JldHVybiBhLnR5cGU9InRocm93IixhLmFyZz10LGUubmV4dD1yLG4mJihlLm1ldGhvZD0ibmV4dCIsZS5hcmc9dm9pZCAwKSwhIW59Zm9yKHZhciBvPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtvPj0wOy0tbyl7dmFyIGk9dGhpcy50cnlFbnRyaWVzW29dLGE9aS5jb21wbGV0aW9uO2lmKCJyb290Ij09PWkudHJ5TG9jKXJldHVybiBuKCJlbmQiKTtpZihpLnRyeUxvYzw9dGhpcy5wcmV2KXt2YXIgYz1yLmNhbGwoaSwiY2F0Y2hMb2MiKSx1PXIuY2FsbChpLCJmaW5hbGx5TG9jIik7aWYoYyYmdSl7aWYodGhpcy5wcmV2PGkuY2F0Y2hMb2MpcmV0dXJuIG4oaS5jYXRjaExvYywhMCk7aWYodGhpcy5wcmV2PGkuZmluYWxseUxvYylyZXR1cm4gbihpLmZpbmFsbHlMb2MpfWVsc2UgaWYoYyl7aWYodGhpcy5wcmV2PGkuY2F0Y2hMb2MpcmV0dXJuIG4oaS5jYXRjaExvYywhMCl9ZWxzZXtpZighdSl0aHJvdyBuZXcgRXJyb3IoInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5Iik7aWYodGhpcy5wcmV2PGkuZmluYWxseUxvYylyZXR1cm4gbihpLmZpbmFsbHlMb2MpfX19fSxhYnJ1cHQ6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO24+PTA7LS1uKXt2YXIgbz10aGlzLnRyeUVudHJpZXNbbl07aWYoby50cnlMb2M8PXRoaXMucHJldiYmci5jYWxsKG8sImZpbmFsbHlMb2MiKSYmdGhpcy5wcmV2PG8uZmluYWxseUxvYyl7dmFyIGk9bzticmVha319aSYmKCJicmVhayI9PT10fHwiY29udGludWUiPT09dCkmJmkudHJ5TG9jPD1lJiZlPD1pLmZpbmFsbHlMb2MmJihpPW51bGwpO3ZhciBhPWk/aS5jb21wbGV0aW9uOnt9O3JldHVybiBhLnR5cGU9dCxhLmFyZz1lLGk/KHRoaXMubWV0aG9kPSJuZXh0Iix0aGlzLm5leHQ9aS5maW5hbGx5TG9jLHMpOnRoaXMuY29tcGxldGUoYSl9LGNvbXBsZXRlOmZ1bmN0aW9uKHQsZSl7aWYoInRocm93Ij09PXQudHlwZSl0aHJvdyB0LmFyZztyZXR1cm4iYnJlYWsiPT09dC50eXBlfHwiY29udGludWUiPT09dC50eXBlP3RoaXMubmV4dD10LmFyZzoicmV0dXJuIj09PXQudHlwZT8odGhpcy5ydmFsPXRoaXMuYXJnPXQuYXJnLHRoaXMubWV0aG9kPSJyZXR1cm4iLHRoaXMubmV4dD0iZW5kIik6Im5vcm1hbCI9PT10LnR5cGUmJmUmJih0aGlzLm5leHQ9ZSksc30sZmluaXNoOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7ZT49MDstLWUpe3ZhciByPXRoaXMudHJ5RW50cmllc1tlXTtpZihyLmZpbmFsbHlMb2M9PT10KXJldHVybiB0aGlzLmNvbXBsZXRlKHIuY29tcGxldGlvbixyLmFmdGVyTG9jKSx4KHIpLHN9fSxjYXRjaDpmdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO2U+PTA7LS1lKXt2YXIgcj10aGlzLnRyeUVudHJpZXNbZV07aWYoci50cnlMb2M9PT10KXt2YXIgbj1yLmNvbXBsZXRpb247aWYoInRocm93Ij09PW4udHlwZSl7dmFyIG89bi5hcmc7eChyKX1yZXR1cm4gb319dGhyb3cgbmV3IEVycm9yKCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHQiKX0sZGVsZWdhdGVZaWVsZDpmdW5jdGlvbih0LGUscil7cmV0dXJuIHRoaXMuZGVsZWdhdGU9e2l0ZXJhdG9yOk8odCkscmVzdWx0TmFtZTplLG5leHRMb2M6cn0sIm5leHQiPT09dGhpcy5tZXRob2QmJih0aGlzLmFyZz12b2lkIDApLHN9fSx0fSh0LmV4cG9ydHMpO3RyeXtyZWdlbmVyYXRvclJ1bnRpbWU9bn1jYXRjaCh0KXtGdW5jdGlvbigiciIsInJlZ2VuZXJhdG9yUnVudGltZSA9IHIiKShuKX19LGZ1bmN0aW9uKHQsZSxyKXtmdW5jdGlvbiBuKHQsZSxyLG4sbyxpLGEpe3RyeXt2YXIgYz10W2ldKGEpLHU9Yy52YWx1ZX1jYXRjaCh0KXtyZXR1cm4gdm9pZCByKHQpfWMuZG9uZT9lKHUpOlByb21pc2UucmVzb2x2ZSh1KS50aGVuKG4sbyl9ZnVuY3Rpb24gbyh0KXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZT10aGlzLHI9YXJndW1lbnRzO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24obyxpKXt2YXIgYT10LmFwcGx5KGUscik7ZnVuY3Rpb24gYyh0KXtuKGEsbyxpLGMsdSwibmV4dCIsdCl9ZnVuY3Rpb24gdSh0KXtuKGEsbyxpLGMsdSwidGhyb3ciLHQpfWModm9pZCAwKX0pKX19ZnVuY3Rpb24gaSh0LGUpe3ZhciByPU9iamVjdC5rZXlzKHQpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCk7ZSYmKG49bi5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsZSkuZW51bWVyYWJsZX0pKSksci5wdXNoLmFwcGx5KHIsbil9cmV0dXJuIHJ9ZnVuY3Rpb24gYSh0KXtmb3IodmFyIGU9MTtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXt2YXIgcj1udWxsIT1hcmd1bWVudHNbZV0/YXJndW1lbnRzW2VdOnt9O2UlMj9pKHIsITApLmZvckVhY2goKGZ1bmN0aW9uKGUpe2ModCxlLHJbZV0pfSkpOk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHQsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMocikpOmkocikuZm9yRWFjaCgoZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsZSkpfSkpfXJldHVybiB0fWZ1bmN0aW9uIGModCxlLHIpe3JldHVybiBlIGluIHQ/T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7dmFsdWU6cixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOnRbZV09cix0fWZ1bmN0aW9uIHUodCxlKXtpZihudWxsPT10KXJldHVybnt9O3ZhciByLG4sbz1mdW5jdGlvbih0LGUpe2lmKG51bGw9PXQpcmV0dXJue307dmFyIHIsbixvPXt9LGk9T2JqZWN0LmtleXModCk7Zm9yKG49MDtuPGkubGVuZ3RoO24rKylyPWlbbl0sZS5pbmRleE9mKHIpPj0wfHwob1tyXT10W3JdKTtyZXR1cm4gb30odCxlKTtpZihPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgaT1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHQpO2ZvcihuPTA7bjxpLmxlbmd0aDtuKyspcj1pW25dLGUuaW5kZXhPZihyKT49MHx8T2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHQscikmJihvW3JdPXRbcl0pfXJldHVybiBvfXZhciBzPXIoNyksZj1yKDIpLmxvZyxsPXIoMykscD1yKDgpLGQ9cig5KSxoPXIoMTIpLHk9cigxMyksZz15LmRlZmF1bHRPcHRpb25zLHY9eS5zcGF3bldvcmtlcixtPXkub25NZXNzYWdlLGI9eS5mZXRjaEZpbGUsdz0wO3QuZXhwb3J0cz1mdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSxlPWwoIldvcmtlciIsdykscj1kKGEoe30sZyx7fSx0KSksbj1yLmxvZ2dlcixpPXIucHJvZ3Jlc3MsYz11KHIsWyJsb2dnZXIiLCJwcm9ncmVzcyJdKSx5PXt9LHg9e30saj12KGMpO3crPTE7dmFyIE89ZnVuY3Rpb24odCxlKXt5W3RdPWV9LGs9ZnVuY3Rpb24odCxlKXt4W3RdPWV9LFA9ZnVuY3Rpb24odCl7dmFyIHI9dC5pZCxuPXQuYWN0aW9uLG89dC5wYXlsb2FkO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCxpKXt2YXIgYT17d29ya2VySWQ6ZSxqb2JJZDpyLGFjdGlvbjpuLHBheWxvYWQ6b307ZigiWyIuY29uY2F0KGUsIl06IFN0YXJ0ICIpLmNvbmNhdChyLCIsIGFjdGlvbj0iKS5jb25jYXQobikpLE8obix0KSxrKG4saSksai5wb3N0TWVzc2FnZShhLGgoYSkpfSkpfSxFPWZ1bmN0aW9uKHQpe3JldHVybiBQKHMoe2lkOnQsYWN0aW9uOiJsb2FkIixwYXlsb2FkOntvcHRpb25zOmN9fSkpfSxMPWZ1bmN0aW9uKCl7dmFyIHQ9byhyZWdlbmVyYXRvclJ1bnRpbWUubWFyaygoZnVuY3Rpb24gdChlLHIsbil7cmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDpyZXR1cm4gdC50MD1QLHQudDE9cyx0LnQyPW4sdC50Mz1lLHQubmV4dD02LGIocik7Y2FzZSA2OnJldHVybiB0LnQ0PXQuc2VudCx0LnQ1PVt0LnQzLHQudDRdLHQudDY9e21ldGhvZDoid3JpdGVGaWxlIixhcmdzOnQudDV9LHQudDc9e2lkOnQudDIsYWN0aW9uOiJGUyIscGF5bG9hZDp0LnQ2fSx0LnQ4PSgwLHQudDEpKHQudDcpLHQuYWJydXB0KCJyZXR1cm4iLCgwLHQudDApKHQudDgpKTtjYXNlIDEyOmNhc2UiZW5kIjpyZXR1cm4gdC5zdG9wKCl9fSksdCl9KSkpO3JldHVybiBmdW5jdGlvbihlLHIsbil7cmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKSxTPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gUChzKHtpZDpyLGFjdGlvbjoiRlMiLHBheWxvYWQ6e21ldGhvZDoid3JpdGVGaWxlIixhcmdzOlt0LGVdfX0pKX0sRj1mdW5jdGlvbih0LGUpe3JldHVybiBQKHMoe2lkOmUsYWN0aW9uOiJGUyIscGF5bG9hZDp7bWV0aG9kOiJyZWFkRmlsZSIsYXJnczpbdF19fSkpfSxUPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIFAocyh7aWQ6ZSxhY3Rpb246IkZTIixwYXlsb2FkOnttZXRob2Q6InVubGluayIsYXJnczpbdF19fSkpfSxfPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIFAocyh7aWQ6ZSxhY3Rpb246InJ1biIscGF5bG9hZDp7YXJnczp0fX0pKX0sQT1mdW5jdGlvbih0LGUpe3JldHVybiBQKHMoe2lkOmUsYWN0aW9uOiJGUyIscGF5bG9hZDp7bWV0aG9kOiJyZWFkZGlyIixhcmdzOlt0XX19KSl9LFI9ZnVuY3Rpb24odCxlKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06IiIsbj1hcmd1bWVudHMubGVuZ3RoPjM/YXJndW1lbnRzWzNdOnZvaWQgMDtyZXR1cm4gXygiLWkgIi5jb25jYXQodCwiICIpLmNvbmNhdChyLCIgIikuY29uY2F0KGUpLG4pfSxEPWZ1bmN0aW9uKHQsZSxyLG4pe3ZhciBvPWFyZ3VtZW50cy5sZW5ndGg+NCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XToiIixpPWFyZ3VtZW50cy5sZW5ndGg+NT9hcmd1bWVudHNbNV06dm9pZCAwO3JldHVybiBfKCItaSAiLmNvbmNhdCh0LCIgLXNzICIpLmNvbmNhdChyLCIgLXRvICIpLmNvbmNhdChuLCIgIikuY29uY2F0KG8sIiAiKS5jb25jYXQoZSksaSl9LEk9ZnVuY3Rpb24oKXt2YXIgdD1vKHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKChmdW5jdGlvbiB0KGUscil7dmFyIG4sbyxpLGE9YXJndW1lbnRzO3JldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6cmV0dXJuIG49YS5sZW5ndGg+MiYmdm9pZCAwIT09YVsyXT9hWzJdOiIiLG89YS5sZW5ndGg+Mz9hWzNdOnZvaWQgMCxpPWUucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiIiLmNvbmNhdCh0LCJcbmZpbGUgIikuY29uY2F0KGUpfSksIiIpLHQubmV4dD01LFMoImNvbmNhdF9saXN0LnR4dCIsaSk7Y2FzZSA1OnJldHVybiB0LmFicnVwdCgicmV0dXJuIixfKCItZiBjb25jYXQgLXNhZmUgMCAtaSBjb25jYXRfbGlzdC50eHQgIi5jb25jYXQobiwiICIpLmNvbmNhdChyKSxvKSk7Y2FzZSA2OmNhc2UiZW5kIjpyZXR1cm4gdC5zdG9wKCl9fSksdCl9KSkpO3JldHVybiBmdW5jdGlvbihlLHIpe3JldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KCksVz1mdW5jdGlvbigpe3ZhciB0PW8ocmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoKGZ1bmN0aW9uIHQoZSl7cmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDppZihudWxsPT09ail7dC5uZXh0PTU7YnJlYWt9cmV0dXJuIHQubmV4dD0zLFAocyh7aWQ6ZSxhY3Rpb246InRlcm1pbmF0ZSJ9KSk7Y2FzZSAzOmoudGVybWluYXRlKCksaj1udWxsO2Nhc2UgNTpyZXR1cm4gdC5hYnJ1cHQoInJldHVybiIsUHJvbWlzZS5yZXNvbHZlKCkpO2Nhc2UgNjpjYXNlImVuZCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQpfSkpKTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKTtyZXR1cm4gbShqLChmdW5jdGlvbih0KXt2YXIgZT10LndvcmtlcklkLHI9dC5qb2JJZCxvPXQuYWN0aW9uLGE9dC5zdGF0dXMsYz10LnBheWxvYWQ7aWYoInJlc29sdmUiPT09YSl7dmFyIHU9Yy5tZXNzYWdlLHM9Yy5kYXRhO2YoIlsiLmNvbmNhdChlLCJdOiBDb21wbGV0ZSAiKS5jb25jYXQocikpLHlbb10oe3dvcmtlcklkOmUsam9iSWQ6cixtZXNzYWdlOnUsZGF0YTpzfSl9ZWxzZXtpZigicmVqZWN0Ij09PWEpdGhyb3cgeFtvXShjKSxFcnJvcihjKTsicHJvZ3Jlc3MiPT09YSYmKHAoYyxpKSxuKGMpKX19KSkse2lkOmUsd29ya2VyOmosc2V0UmVzb2x2ZTpPLHNldFJlamVjdDprLGxvYWQ6RSx3cml0ZTpMLHdyaXRlVGV4dDpTLHJlYWQ6RixyZW1vdmU6VCxsczpBLHJ1bjpfLHRyYW5zY29kZTpSLHRyaW06RCxjb25jYXREZW11eGVyOkksdGVybWluYXRlOld9fX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoMyksbz0wO3QuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZT10LmlkLHI9dC5hY3Rpb24saT10LnBheWxvYWQsYT12b2lkIDA9PT1pP3t9OmksYz1lO3JldHVybiB2b2lkIDA9PT1jJiYoYz1uKCJKb2IiLG8pLG8rPTEpLHtpZDpjLGFjdGlvbjpyLHBheWxvYWQ6YX19fSxmdW5jdGlvbih0LGUpe2Z1bmN0aW9uIHIodCxlKXtyZXR1cm4gZnVuY3Rpb24odCl7aWYoQXJyYXkuaXNBcnJheSh0KSlyZXR1cm4gdH0odCl8fGZ1bmN0aW9uKHQsZSl7aWYoIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KHQpfHwiW29iamVjdCBBcmd1bWVudHNdIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSkpcmV0dXJuO3ZhciByPVtdLG49ITAsbz0hMSxpPXZvaWQgMDt0cnl7Zm9yKHZhciBhLGM9dFtTeW1ib2wuaXRlcmF0b3JdKCk7IShuPShhPWMubmV4dCgpKS5kb25lKSYmKHIucHVzaChhLnZhbHVlKSwhZXx8ci5sZW5ndGghPT1lKTtuPSEwKTt9Y2F0Y2godCl7bz0hMCxpPXR9ZmluYWxseXt0cnl7bnx8bnVsbD09Yy5yZXR1cm58fGMucmV0dXJuKCl9ZmluYWxseXtpZihvKXRocm93IGl9fXJldHVybiByfSh0LGUpfHxmdW5jdGlvbigpe3Rocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKX0oKX12YXIgbj0wLG89ZnVuY3Rpb24odCl7dmFyIGU9cih0LnNwbGl0KCI6IiksMyksbj1lWzBdLG89ZVsxXSxpPWVbMl07cmV0dXJuIDYwKnBhcnNlRmxvYXQobikqNjArNjAqcGFyc2VGbG9hdChvKStwYXJzZUZsb2F0KGkpfTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt2YXIgcj10Lm1lc3NhZ2U7aWYoInN0cmluZyI9PXR5cGVvZiByKWlmKHIuc3RhcnRzV2l0aCgiICBEdXJhdGlvbiIpKXt2YXIgaT1yLnNwbGl0KCIsICIpWzBdLnNwbGl0KCI6ICIpWzFdLGE9byhpKTsoMD09PW58fG4+YSkmJihuPWEpfWVsc2UgaWYoci5zdGFydHNXaXRoKCJmcmFtZSIpKXt2YXIgYz1yLnNwbGl0KCJ0aW1lPSIpWzFdLnNwbGl0KCIgIilbMF07ZSh7cmF0aW86byhjKS9ufSl9ZWxzZSByLnN0YXJ0c1dpdGgoInZpZGVvOiIpJiZlKHtyYXRpbzoxfSl9fSxmdW5jdGlvbih0LGUscil7ZnVuY3Rpb24gbih0LGUpe3ZhciByPU9iamVjdC5rZXlzKHQpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCk7ZSYmKG49bi5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsZSkuZW51bWVyYWJsZX0pKSksci5wdXNoLmFwcGx5KHIsbil9cmV0dXJuIHJ9ZnVuY3Rpb24gbyh0LGUscil7cmV0dXJuIGUgaW4gdD9PYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHt2YWx1ZTpyLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6dFtlXT1yLHR9dmFyIGk9ImJyb3dzZXIiPT09cigxMCkoInR5cGUiKT9yKDEpOmZ1bmN0aW9uKHQpe3JldHVybiB0fTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTE7ZTxhcmd1bWVudHMubGVuZ3RoO2UrKyl7dmFyIHI9bnVsbCE9YXJndW1lbnRzW2VdP2FyZ3VtZW50c1tlXTp7fTtlJTI/bihyLCEwKS5mb3JFYWNoKChmdW5jdGlvbihlKXtvKHQsZSxyW2VdKX0pKTpPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycz9PYmplY3QuZGVmaW5lUHJvcGVydGllcyh0LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHIpKTpuKHIpLmZvckVhY2goKGZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLGUpKX0pKX1yZXR1cm4gdH0oe30sdCk7cmV0dXJuWyJjb3JlUGF0aCIsIndvcmtlclBhdGgiXS5mb3JFYWNoKChmdW5jdGlvbihyKXt2b2lkIDAhPT10W3JdJiYoZVtyXT1pKGVbcl0pKX0pKSxlfX0sZnVuY3Rpb24odCxlLHIpeyhmdW5jdGlvbihlKXtmdW5jdGlvbiBuKHQpe3JldHVybihuPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiB0fSkodCl9dmFyIG89cigxMSk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciByPXt9O3JldHVybiBvKCk/ci50eXBlPSJlbGVjdHJvbiI6Im9iamVjdCI9PT0oInVuZGVmaW5lZCI9PXR5cGVvZiB3aW5kb3c/InVuZGVmaW5lZCI6bih3aW5kb3cpKT9yLnR5cGU9ImJyb3dzZXIiOiJmdW5jdGlvbiI9PXR5cGVvZiBpbXBvcnRTY3JpcHRzP3IudHlwZT0id2Vid29ya2VyIjoib2JqZWN0Ij09PSh2b2lkIDA9PT1lPyJ1bmRlZmluZWQiOm4oZSkpJiYoci50eXBlPSJub2RlIiksdm9pZCAwPT09dD9yOnJbdF19fSkuY2FsbCh0aGlzLHIoMCkpfSxmdW5jdGlvbih0LGUscil7KGZ1bmN0aW9uKGUpe3QuZXhwb3J0cz1mdW5jdGlvbigpe3JldHVybiJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93JiYib2JqZWN0Ij09dHlwZW9mIHdpbmRvdy5wcm9jZXNzJiYicmVuZGVyZXIiPT09d2luZG93LnByb2Nlc3MudHlwZXx8KCEodm9pZCAwPT09ZXx8Im9iamVjdCIhPXR5cGVvZiBlLnZlcnNpb25zfHwhZS52ZXJzaW9ucy5lbGVjdHJvbil8fCJvYmplY3QiPT10eXBlb2YgbmF2aWdhdG9yJiYic3RyaW5nIj09dHlwZW9mIG5hdmlnYXRvci51c2VyQWdlbnQmJm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZigiRWxlY3Ryb24iKT49MCl9fSkuY2FsbCh0aGlzLHIoMCkpfSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZT1bXSxyPWZ1bmN0aW9uKHQpe3QgaW5zdGFuY2VvZiBVaW50OEFycmF5P2UucHVzaCh0LmJ1ZmZlcik6dCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyJiZlLnB1c2godCl9LG49dC5wYXlsb2FkLG89bi5hcmdzLGk9bi5kYXRhO3JldHVybiByKGkpLEFycmF5LmlzQXJyYXkobykmJm8uZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIHIodCl9KSksZX19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDE0KSxvPXIoMTcpLGk9cigxOCksYT1yKDE5KTt0LmV4cG9ydHM9e2RlZmF1bHRPcHRpb25zOm4sc3Bhd25Xb3JrZXI6byxvbk1lc3NhZ2U6aSxmZXRjaEZpbGU6YX19LGZ1bmN0aW9uKHQsZSxyKXsoZnVuY3Rpb24oZSl7ZnVuY3Rpb24gbih0LGUpe3ZhciByPU9iamVjdC5rZXlzKHQpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCk7ZSYmKG49bi5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsZSkuZW51bWVyYWJsZX0pKSksci5wdXNoLmFwcGx5KHIsbil9cmV0dXJuIHJ9ZnVuY3Rpb24gbyh0LGUscil7cmV0dXJuIGUgaW4gdD9PYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHt2YWx1ZTpyLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6dFtlXT1yLHR9dmFyIGk9cigxKSxhPXIoMTUpLGM9YS52ZXJzaW9uLHU9YS5kZXBlbmRlbmNpZXMscz1yKDE2KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTE7ZTxhcmd1bWVudHMubGVuZ3RoO2UrKyl7dmFyIHI9bnVsbCE9YXJndW1lbnRzW2VdP2FyZ3VtZW50c1tlXTp7fTtlJTI/bihyLCEwKS5mb3JFYWNoKChmdW5jdGlvbihlKXtvKHQsZSxyW2VdKX0pKTpPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycz9PYmplY3QuZGVmaW5lUHJvcGVydGllcyh0LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHIpKTpuKHIpLmZvckVhY2goKGZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLGUpKX0pKX1yZXR1cm4gdH0oe30scyx7d29ya2VyUGF0aDp2b2lkIDAhPT1lJiYiZGV2ZWxvcG1lbnQiPT09ZS5lbnYuRkZNUEVHX0VOVj9pKCIvZGlzdC93b3JrZXIuZGV2LmpzP25vY2FjaGU9Ii5jb25jYXQoTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMykpKToiaHR0cHM6Ly91bnBrZy5jb20vQGZmbXBlZy9mZm1wZWdAdiIuY29uY2F0KGMsIi9kaXN0L3dvcmtlci5taW4uanMiKSxjb3JlUGF0aDoiaHR0cHM6Ly91bnBrZy5jb20vQGZmbXBlZy9jb3JlQHYiLmNvbmNhdCh1WyJAZmZtcGVnL2NvcmUiXS5zdWJzdHJpbmcoMSksIi9mZm1wZWctY29yZS5qcyIpLHdvcmtlckJsb2JVUkw6ITB9KX0pLmNhbGwodGhpcyxyKDApKX0sZnVuY3Rpb24odCl7dC5leHBvcnRzPUpTT04ucGFyc2UoJ3sibmFtZSI6IkBmZm1wZWcvZmZtcGVnIiwidmVyc2lvbiI6IjAuNi4xIiwiZGVzY3JpcHRpb24iOiJGRm1wZWcgV2ViQXNzZW1ibHkgdmVyc2lvbiIsIm1haW4iOiJzcmMvaW5kZXguanMiLCJkaXJlY3RvcmllcyI6eyJleGFtcGxlIjoiZXhhbXBsZXMifSwic2NyaXB0cyI6eyJzdGFydCI6Im5vZGUgc2NyaXB0cy9zZXJ2ZXIuanMiLCJidWlsZCI6InJpbXJhZiBkaXN0ICYmIHdlYnBhY2sgLS1jb25maWcgc2NyaXB0cy93ZWJwYWNrLmNvbmZpZy5wcm9kLmpzIiwicHJlcHVibGlzaE9ubHkiOiJucG0gcnVuIGJ1aWxkIiwibGludCI6ImVzbGludCBzcmMiLCJ3YWl0IjoicmltcmFmIGRpc3QgJiYgd2FpdC1vbiBodHRwOi8vbG9jYWxob3N0OjMwMDAvZGlzdC9mZm1wZWcuZGV2LmpzIiwidGVzdCI6Im5wbS1ydW4tYWxsIC1wIC1yIHN0YXJ0IHRlc3Q6YWxsIiwidGVzdDphbGwiOiJucG0tcnVuLWFsbCB3YWl0IHRlc3Q6YnJvd3NlcjpmZm1wZWcgdGVzdDpub2RlOmFsbCIsInRlc3Q6bm9kZSI6Im55YyBtb2NoYSAtLWV4aXQgLS1iYWlsIC0tcmVxdWlyZSAuL3NjcmlwdHMvdGVzdC1oZWxwZXIuanMiLCJ0ZXN0Om5vZGU6YWxsIjoibnBtIHJ1biB0ZXN0Om5vZGUgLS0gLi90ZXN0cy8qLnRlc3QuanMiLCJ0ZXN0OmJyb3dzZXIiOiJtb2NoYS1oZWFkbGVzcy1jaHJvbWUgLWEgaW5jb2duaXRvIC1hIG5vLXNhbmRib3ggLWEgZGlzYWJsZS1zZXR1aWQtc2FuZGJveCAtYSBkaXNhYmxlLWxvZ2dpbmcgLXQgMzAwMDAwIiwidGVzdDpicm93c2VyOmZmbXBlZyI6Im5wbSBydW4gdGVzdDpicm93c2VyIC0tIC1mIC4vdGVzdHMvZmZtcGVnLnRlc3QuaHRtbCJ9LCJicm93c2VyIjp7Ii4vc3JjL3dvcmtlci9ub2RlL2luZGV4LmpzIjoiLi9zcmMvd29ya2VyL2Jyb3dzZXIvaW5kZXguanMifSwicmVwb3NpdG9yeSI6eyJ0eXBlIjoiZ2l0IiwidXJsIjoiZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS9mZm1wZWdqcy9mZm1wZWcuanMuZ2l0In0sImtleXdvcmRzIjpbImZmbXBlZyIsIldlYkFzc2VtYmx5IiwidmlkZW8iXSwiYXV0aG9yIjoiSmVyb21lIFd1IDxqZXJvbWV3dXNAZ21haWwuY29tPiIsImxpY2Vuc2UiOiJNSVQiLCJidWdzIjp7InVybCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9mZm1wZWdqcy9mZm1wZWcuanMvaXNzdWVzIn0sImVuZ2luZXMiOnsibm9kZSI6Ij49MTAuNS4wIn0sImhvbWVwYWdlIjoiaHR0cHM6Ly9naXRodWIuY29tL2ZmbXBlZ2pzL2ZmbXBlZy5qcyNyZWFkbWUiLCJkZXBlbmRlbmNpZXMiOnsiQGZmbXBlZy9jb3JlIjoiXjAuNi4wIiwiaWRiIjoiXjQuMC41IiwiaXMtZWxlY3Ryb24iOiJeMi4yLjAiLCJpcy11cmwiOiJeMS4yLjQiLCJub2RlLWZldGNoIjoiXjIuNi4wIiwicmVnZW5lcmF0b3ItcnVudGltZSI6Il4wLjEzLjMiLCJyZXNvbHZlLXVybCI6Il4wLjIuMSJ9LCJkZXZEZXBlbmRlbmNpZXMiOnsiQGJhYmVsL2NvcmUiOiJeNy42LjQiLCJAYmFiZWwvcHJlc2V0LWVudiI6Il43LjYuMyIsImJhYmVsLWxvYWRlciI6Il44LjAuNiIsImNvcnMiOiJeMi44LjUiLCJlc2xpbnQiOiJeNi4xLjAiLCJlc2xpbnQtY29uZmlnLWFpcmJuYi1iYXNlIjoiXjE0LjAuMCIsImVzbGludC1wbHVnaW4taW1wb3J0IjoiXjIuMTguMiIsImV4cGVjdC5qcyI6Il4wLjMuMSIsImV4cHJlc3MiOiJeNC4xNy4xIiwibW9jaGEiOiJeNi4yLjIiLCJtb2NoYS1oZWFkbGVzcy1jaHJvbWUiOiJeMi4wLjMiLCJucG0tcnVuLWFsbCI6Il40LjEuNSIsIm55YyI6Il4xNC4xLjEiLCJ3YWl0LW9uIjoiXjMuMy4wIiwid2VicGFjayI6Il40LjQxLjIiLCJ3ZWJwYWNrLWNsaSI6Il4zLjMuOSIsIndlYnBhY2stZGV2LW1pZGRsZXdhcmUiOiJeMy43LjIifX0nKX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e2xvZ2dlcjpmdW5jdGlvbigpe30scHJvZ3Jlc3M6ZnVuY3Rpb24oKXt9fX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGUscj10LndvcmtlclBhdGgsbj10LndvcmtlckJsb2JVUkw7aWYoQmxvYiYmVVJMJiZuKXt2YXIgbz1uZXcgQmxvYihbJ2ltcG9ydFNjcmlwdHMoIicuY29uY2F0KHIsJyIpOycpXSx7dHlwZToiYXBwbGljYXRpb24vamF2YXNjcmlwdCJ9KTtlPW5ldyBXb3JrZXIoVVJMLmNyZWF0ZU9iamVjdFVSTChvKSl9ZWxzZSBlPW5ldyBXb3JrZXIocik7cmV0dXJuIGV9fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3Qub25tZXNzYWdlPWZ1bmN0aW9uKHQpe3ZhciByPXQuZGF0YTtlKHIpfX19LGZ1bmN0aW9uKHQsZSxyKXtmdW5jdGlvbiBuKHQsZSxyLG4sbyxpLGEpe3RyeXt2YXIgYz10W2ldKGEpLHU9Yy52YWx1ZX1jYXRjaCh0KXtyZXR1cm4gdm9pZCByKHQpfWMuZG9uZT9lKHUpOlByb21pc2UucmVzb2x2ZSh1KS50aGVuKG4sbyl9dmFyIG89cigxKSxpPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSxyKXt2YXIgbj1uZXcgRmlsZVJlYWRlcjtuLm9ubG9hZD1mdW5jdGlvbigpe2Uobi5yZXN1bHQpfSxuLm9uZXJyb3I9ZnVuY3Rpb24odCl7dmFyIGU9dC50YXJnZXQuZXJyb3IuY29kZTtyKEVycm9yKCJGaWxlIGNvdWxkIG5vdCBiZSByZWFkISBDb2RlPSIuY29uY2F0KGUpKSl9LG4ucmVhZEFzQXJyYXlCdWZmZXIodCl9KSl9O3QuZXhwb3J0cz1mdW5jdGlvbigpe3ZhciB0LGU9KHQ9cmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoKGZ1bmN0aW9uIHQoZSl7dmFyIHIsbjtyZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOmlmKHI9ZSx2b2lkIDAhPT1lKXt0Lm5leHQ9MzticmVha31yZXR1cm4gdC5hYnJ1cHQoInJldHVybiIsInVuZGVmaW5lZCIpO2Nhc2UgMzppZigic3RyaW5nIiE9dHlwZW9mIGUpe3QubmV4dD0xNjticmVha31pZighL2RhdGE6X2RhdGFcLyhbYS16QS1aXSopO2Jhc2U2NCwoW14iXSopLy50ZXN0KGUpKXt0Lm5leHQ9ODticmVha31yPWF0b2IoZS5zcGxpdCgiLCIpWzFdKS5zcGxpdCgiIikubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5jaGFyQ29kZUF0KDApfSkpLHQubmV4dD0xNDticmVhaztjYXNlIDg6cmV0dXJuIHQubmV4dD0xMCxmZXRjaChvKGUpKTtjYXNlIDEwOnJldHVybiBuPXQuc2VudCx0Lm5leHQ9MTMsbi5hcnJheUJ1ZmZlcigpO2Nhc2UgMTM6cj10LnNlbnQ7Y2FzZSAxNDp0Lm5leHQ9MjA7YnJlYWs7Y2FzZSAxNjppZighKGUgaW5zdGFuY2VvZiBGaWxlfHxlIGluc3RhbmNlb2YgQmxvYikpe3QubmV4dD0yMDticmVha31yZXR1cm4gdC5uZXh0PTE5LGkoZSk7Y2FzZSAxOTpyPXQuc2VudDtjYXNlIDIwOnJldHVybiB0LmFicnVwdCgicmV0dXJuIixuZXcgVWludDhBcnJheShyKSk7Y2FzZSAyMTpjYXNlImVuZCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQpfSkpLGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxyPWFyZ3VtZW50cztyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKG8saSl7dmFyIGE9dC5hcHBseShlLHIpO2Z1bmN0aW9uIGModCl7bihhLG8saSxjLHUsIm5leHQiLHQpfWZ1bmN0aW9uIHUodCl7bihhLG8saSxjLHUsInRocm93Iix0KX1jKHZvaWQgMCl9KSl9KTtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKX1dKX0pKTsKLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmZtcGVnLm1pbi5qcy5tYXA="},{"meta":{"name":"p-queue@6.3.0","url":"https://bundle.run/p-queue@6.3.0","ts":1698548178662,"mimetype":"text/plain"},"source":"bnVsbA=="}]},{"name":"Neopets - Daily Quest Helper","options":{"check_for_updates":true,"user_modified":1728145458280,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://*.neopets.com/questlog/"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_run_in":[]},"run_in":null,"tags":[]},"storage":{"ts":1699407170955,"data":{}},"enabled":true,"position":12,"file_url":"https://update.greasyfork.org/scripts/479268/Neopets%20-%20Daily%20Quest%20Helper.user.js","uuid":"decb3107-a094-4452-a303-f58c1e54815b","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBOZW9wZXRzIC0gRGFpbHkgUXVlc3QgSGVscGVyCi8vIEBuYW1lc3BhY2UgICAgbmVvcGV0cwovLyBAYXV0aG9yICAgICAgIGJsYXN0IG1lIHNub3dkYWRkeQovLyBAZGVzY3JpcHRpb24gIEFkZHMgYSBsaW5rIHRvIGRhaWx5IHF1ZXN0cyBpZiBhdmFpbGFibGUKLy8gQG1hdGNoICAgICAgICAgKjovLyoubmVvcGV0cy5jb20vcXVlc3Rsb2cvCi8vIEBncmFudCAgICAgICAgbm9uZQovLyBAdmVyc2lvbiAxLjAKLy8gQGRvd25sb2FkVVJMIGh0dHBzOi8vdXBkYXRlLmdyZWFzeWZvcmsub3JnL3NjcmlwdHMvNDc5MjY4L05lb3BldHMlMjAtJTIwRGFpbHklMjBRdWVzdCUyMEhlbHBlci51c2VyLmpzCi8vIEB1cGRhdGVVUkwgaHR0cHM6Ly91cGRhdGUuZ3JlYXN5Zm9yay5vcmcvc2NyaXB0cy80NzkyNjgvTmVvcGV0cyUyMC0lMjBEYWlseSUyMFF1ZXN0JTIwSGVscGVyLm1ldGEuanMKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CgogICAgLy8gRnVuY3Rpb24gdG8gY3JlYXRlIGEgbGluawogICAgZnVuY3Rpb24gY3JlYXRlTGluayh1cmwsIG5hbWUgPSAnTGluaycpIHsKICAgICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogICAgICAgIGxpbmsuaHJlZiA9IHVybDsKICAgICAgICBsaW5rLnRhcmdldCA9ICdfYmxhbmsnOwogICAgICAgIGxpbmsuc3R5bGUubWFyZ2luTGVmdCA9ICc1cHgnOwogICAgICAgIGxpbmsuc3R5bGUudGV4dERlY29yYXRpb24gPSAndW5kZXJsaW5lJzsKICAgICAgICBsaW5rLnRleHRDb250ZW50ID0gYFske25hbWV9XWA7CiAgICAgICAgcmV0dXJuIGxpbms7CiAgICB9CgogICAgLy8gTG9vcCB0aHJvdWdoIGFsbCBlbGVtZW50cyB3aXRoIHRoZSBjbGFzcyAncWwtcXVlc3QtZGVzY3JpcHRpb24nCiAgICBjb25zdCBxdWVzdERlc2NyaXB0aW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5xbC1xdWVzdC1kZXNjcmlwdGlvbicpOwogICAgcXVlc3REZXNjcmlwdGlvbnMuZm9yRWFjaChkZXNjID0+IHsKICAgICAgICBpZiAoZGVzYy50ZXh0Q29udGVudC5pbmNsdWRlcygiQ3VzdG9taXNlIG9uZSBvZiB5b3VyIE5lb3BldHMiKSkgewogICAgICAgICAgICBjb25zdCBsaW5rID0gY3JlYXRlTGluaygnaHR0cHM6Ly93d3cubmVvcGV0cy5jb20vY3VzdG9taXNlLycpOwogICAgICAgICAgICBkZXNjLmFwcGVuZENoaWxkKGxpbmspOwogICAgICAgIH0gZWxzZSBpZiAoZGVzYy50ZXh0Q29udGVudC5pbmNsdWRlcygiUGxheSBhbnkgR2FtZSBvciBDbGFzc2ljIEdhbWUgaW4gdGhlIEdhbWVzIFJvb20iKSkgewogICAgICAgICAgICBjb25zdCBsaW5rID0gY3JlYXRlTGluaygnaHR0cHM6Ly93d3cubmVvcGV0cy5jb20vZ2FtZXMvZ2FtZS5waHRtbD9nYW1lX2lkPTgyMCcpOwogICAgICAgICAgICBkZXNjLmFwcGVuZENoaWxkKGxpbmspOwogICAgICAgIH0KICAgICAgICAvKioKICAgICAgICBJZiB5b3Ugd2FudCB0byBhZGQgbW9yZSBsaW5rcyB0byBhIHF1ZXN0LCBkbyB3aGF0IEkgZGlkIGJlbG93IGhlcmU6CiAgICAgICAgKi8KICAgICAgICBlbHNlIGlmIChkZXNjLnRleHRDb250ZW50LmluY2x1ZGVzKCJQdXJjaGFzZSBpdGVtKHMpIGZyb20gYW55IE5lb3BpYW4gU2hvcCIpKSB7CiAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBjcmVhdGVMaW5rKCdodHRwczovL3d3dy5uZW9wZXRzLmNvbS9nZW5lcmFsc3RvcmUucGh0bWwnKTsKICAgICAgICAgICAgY29uc3QgbGluazIgPSBjcmVhdGVMaW5rKCdodHRwczovL3d3dy5uZW9wZXRzLmNvbS9mYWVyaWVsYW5kL3NwcmluZ3MucGh0bWwnKTsKICAgICAgICAgICAgZGVzYy5hcHBlbmRDaGlsZChsaW5rKTsKICAgICAgICAgICAgZGVzYy5hcHBlbmRDaGlsZChsaW5rMik7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKGRlc2MudGV4dENvbnRlbnQuaW5jbHVkZXMoIldoZWVsIG9mIE1lZGlvY3JpdHkiKSkgewogICAgICAgICAgICBjb25zdCBsaW5rID0gY3JlYXRlTGluaygnaHR0cHM6Ly93d3cubmVvcGV0cy5jb20vcHJlaGlzdG9yaWMvbWVkaW9jcml0eS5waHRtbCcpOwogICAgICAgICAgICBkZXNjLmFwcGVuZENoaWxkKGxpbmspOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChkZXNjLnRleHRDb250ZW50LmluY2x1ZGVzKCJXaGVlbCBvZiBFeGNpdGVtZW50IikpIHsKICAgICAgICAgICAgY29uc3QgbGluayA9IGNyZWF0ZUxpbmsoJ2h0dHBzOi8vd3d3Lm5lb3BldHMuY29tL2ZhZXJpZWxhbmQvd2hlZWwucGh0bWwnKTsKICAgICAgICAgICAgZGVzYy5hcHBlbmRDaGlsZChsaW5rKTsKICAgICAgICB9IGVsc2UgaWYgKGRlc2MudGV4dENvbnRlbnQuaW5jbHVkZXMoIldoZWVsIG9mIEtub3dsZWRnZSIpKSB7CiAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBjcmVhdGVMaW5rKCdodHRwczovL3d3dy5uZW9wZXRzLmNvbS9tZWRpZXZhbC9rbm93bGVkZ2UucGh0bWwnKTsKICAgICAgICAgICAgZGVzYy5hcHBlbmRDaGlsZChsaW5rKTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoZGVzYy50ZXh0Q29udGVudC5pbmNsdWRlcygiV2hlZWwgb2YgTWlzZm9ydHVuZSIpKSB7CiAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBjcmVhdGVMaW5rKCdodHRwczovL3d3dy5uZW9wZXRzLmNvbS9oYWxsb3dlZW4vd2hlZWwvaW5kZXgucGh0bWwnKTsKICAgICAgICAgICAgZGVzYy5hcHBlbmRDaGlsZChsaW5rKTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoZGVzYy50ZXh0Q29udGVudC5pbmNsdWRlcygiR3Jvb20gb25lIG9mIHlvdXIgTmVvcGV0cyB3aXRoIGFueSBncm9vbWluZyBpdGVtIikpIHsKICAgICAgICAgICAgY29uc3QgbGluayA9IGNyZWF0ZUxpbmsoJ2h0dHBzOi8vd3d3Lm5lb3BldHMuY29tL2ludmVudG9yeS5waHRtbCcsICdJbnZlbnRvcnknKTsKICAgICAgICAgICAgY29uc3QgbGluazIgPSBjcmVhdGVMaW5rKCdodHRwczovL3d3dy5uZW9wZXRzLmNvbS9zYWZldHlkZXBvc2l0LnBodG1sP29ial9uYW1lPSZjYXRlZ29yeT0xMCcsICdTREInKTsKICAgICAgICAgICAgZGVzYy5hcHBlbmRDaGlsZChsaW5rKTsKICAgICAgICAgICAgZGVzYy5hcHBlbmRDaGlsZChsaW5rMik7CiAgICAgICAgfQoKICAgIH0pOwp9KSgpOw=="},{"name":"Cookie Monster","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":["/https?://orteil.dashnet.org/cookieclicker/","/https?://cookieclicker.ee/"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_run_in":[]},"run_in":null,"tags":[]},"storage":{"ts":1708019486468,"data":{}},"enabled":true,"position":13,"file_url":"https://github.com/CookieMonsterTeam/CookieMonster/raw/dev/CookieMonster.user.js","uuid":"a744a852-f205-4c21-b516-a825256abbd2","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgQ29va2llIE1vbnN0ZXIKLy8gQGluY2x1ZGUgL2h0dHBzPzovL29ydGVpbC5kYXNobmV0Lm9yZy9jb29raWVjbGlja2VyLwovLyBAaW5jbHVkZSAvaHR0cHM/Oi8vY29va2llY2xpY2tlci5lZS8KLy8gPT0vVXNlclNjcmlwdD09Cgpjb25zdCByZWFkeUNoZWNrID0gc2V0SW50ZXJ2YWwoKCkgPT4gewogIGNvbnN0IEdhbWUgPSB1bnNhZmVXaW5kb3cuR2FtZTsKCiAgaWYgKHR5cGVvZiBHYW1lICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgR2FtZS5yZWFkeSAhPT0gJ3VuZGVmaW5lZCcgJiYgR2FtZS5yZWFkeSkgewogICAgR2FtZS5Mb2FkTW9kKCdodHRwczovL2Nvb2tpZW1vbnN0ZXJ0ZWFtLmdpdGh1Yi5pby9Db29raWVNb25zdGVyL2Rpc3QvQ29va2llTW9uc3Rlci5qcycpOwogICAgY2xlYXJJbnRlcnZhbChyZWFkeUNoZWNrKTsKICB9Cn0sIDEwMDApOwo="},{"name":"Word and Text Replace","options":{"check_for_updates":true,"user_modified":1722953742315,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://*/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":["*://docs.google.com/*","*://drive.google.com/*","*://mail.google.com/*"],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":true,"orig_run_in":[]},"run_in":null,"tags":[]},"storage":{"ts":1722952720978,"data":{}},"enabled":false,"position":14,"file_url":"https://update.greasyfork.org/scripts/382467/Word%20and%20Text%20Replace.user.js","uuid":"1879ed77-ffe1-4e0b-a41a-14b0c474bc16","source":"","requires":[{"meta":{"name":"jquery-3.4.1.min.js","url":"https://code.jquery.com/jquery-3.4.1.min.js","ts":1722952721150,"mimetype":"text/javascript"},"source":""}]}]}